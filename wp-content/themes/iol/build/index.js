/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/changeMode.js":
/*!***************************!*\
  !*** ./src/changeMode.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangeMode": () => (/* binding */ ChangeMode)
/* harmony export */ });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);

class ChangeMode {
  constructor() {
    let elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this.events();
  }

  events() {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()("#change-mode").on("click", this.changeMode.bind(this));
  }

  changeMode() {
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(".changeMode").toggleClass("courses gridcol-3 gap-2");
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(".changeMode > div").toggleClass("course-card_list");
    return false;
  }

}

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_style_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../css/style.scss */ "./css/style.scss");
/* harmony import */ var _changeMode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./changeMode */ "./src/changeMode.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ "react-dom");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _pages_components_input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/components/input */ "./src/pages/components/input.js");
/* harmony import */ var _pages_animations_buttonSubmit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pages/animations/buttonSubmit */ "./src/pages/animations/buttonSubmit.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./src/utils.js");
/* harmony import */ var _pages_components_ui_menus_Nav__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./pages/components/ui/menus/Nav */ "./src/pages/components/ui/menus/Nav.js");
/* harmony import */ var _pages_components_ui_menus_Header__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pages/components/ui/menus/Header */ "./src/pages/components/ui/menus/Header.js");
/* harmony import */ var _modules_Slider__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/Slider */ "./src/modules/Slider.js");





const mode = new _changeMode__WEBPACK_IMPORTED_MODULE_2__.ChangeMode();






const slider = new _modules_Slider__WEBPACK_IMPORTED_MODULE_10__["default"]();
const animations = new _pages_animations_buttonSubmit__WEBPACK_IMPORTED_MODULE_6__.AnimHandler();
window.addEventListener("load", () => {
  console.log(ioldata);
  const headernav = document.querySelector("#header_mobile");
  react_dom__WEBPACK_IMPORTED_MODULE_4___default().render((0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_pages_components_ui_menus_Header__WEBPACK_IMPORTED_MODULE_9__.Header, {
    categories: headernav.getAttribute("data-categories"),
    innerHTML: headernav.innerHTML
  }), headernav); // if (!ioldata.is_mobile) {
  // if (ioldata.slug == "inputs") {

  const nav = document.querySelector(".search-page .navigation-bar");
  const navHtml = nav.innerHTML;
  react_dom__WEBPACK_IMPORTED_MODULE_4___default().render((0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_pages_components_ui_menus_Nav__WEBPACK_IMPORTED_MODULE_8__.Nav, {
    innerHTML: navHtml
  }), nav); // }
  // }
  // add jquery to all elements, even react

  jquery__WEBPACK_IMPORTED_MODULE_3___default()(".wp-site-blocks").one("DOMSubtreeModified", () => {
    _pages_components_input__WEBPACK_IMPORTED_MODULE_5__.inputJquery.makeOutline("red");
  }); // const reviewButton
});

/***/ }),

/***/ "./src/modules/Slider.js":
/*!*******************************!*\
  !*** ./src/modules/Slider.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _glidejs_glide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @glidejs/glide */ "./node_modules/@glidejs/glide/dist/glide.esm.js");


class HeroSlider {
  constructor() {
    if (document.querySelector(".hero-slider")) {
      // count how many slides there are
      // const dotCount = document.querySelectorAll(".hero-slider__slide").length
      // Generate the HTML for the navigation dots
      // let dotHTML = ""
      // for (let i = 0; i < dotCount; i++) {
      // 	dotHTML += `<button class="slider__bullet glide__bullet" data-glide-dir="=${i}"></button>`
      // }
      // Add the dots HTML to the DOM
      // document.querySelector(".glide__bullets").insertAdjacentHTML("beforeend", dotHTML)
      // Actually initialize the glide / slider script
      var glide = new _glidejs_glide__WEBPACK_IMPORTED_MODULE_0__["default"](".hero-slider", {
        type: "slider",
        perView: 1,
        autoplay: 8000
      });
      glide.mount();
    }
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HeroSlider);

/***/ }),

/***/ "./src/pages/animations/buttonSubmit.js":
/*!**********************************************!*\
  !*** ./src/pages/animations/buttonSubmit.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AnimHandler": () => (/* binding */ AnimHandler)
/* harmony export */ });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);

class AnimHandler {
  constructor() {
    this.init();
  }

  init() {
    this.buttonSubmit();
  }

  buttonSubmit() {
    const buttonName = ".buttonSubmit";
    jquery__WEBPACK_IMPORTED_MODULE_0___default()(buttonName).on("click", () => {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(buttonName).addClass("onclic", 250).queue(next => {
        setTimeout(() => {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(buttonName).removeClass("onclic");
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(buttonName).addClass("validate", 450);
          next();
        }, 2250);
      }).queue(next => {
        setTimeout(() => {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(buttonName).removeClass("validate");
        }, 1250);
        next();
      });
    });
  }

}

/***/ }),

/***/ "./src/pages/components/Icon.js":
/*!**************************************!*\
  !*** ./src/pages/components/Icon.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Icon": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);

 // php and react are using different icons, need to create new folder to store the icons or invent a different solution

/**
 *
 *
 * @param {(beginner|intermediate|advanced)} { iconName = '' }
 */

const Icon = _ref => {
  let {
    iconName = ""
  } = _ref;
  const [currIcon, SetCurrIcon] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("");
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (iconName) {
      SetCurrIcon(iconName.toLowerCase());
    }
  }, [iconName]);

  switch (currIcon) {
    case "list":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        width: "18",
        height: "18",
        viewBox: "0 0 18 18",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M4.5 13.85C4.7 13.85 4.875 13.775 5.025 13.625C5.175 13.475 5.25 13.3 5.25 13.1C5.25 12.9 5.175 12.725 5.025 12.575C4.875 12.425 4.7 12.35 4.5 12.35C4.3 12.35 4.125 12.425 3.975 12.575C3.825 12.725 3.75 12.9 3.75 13.1C3.75 13.3 3.825 13.475 3.975 13.625C4.125 13.775 4.3 13.85 4.5 13.85ZM4.5 9.75C4.7 9.75 4.875 9.675 5.025 9.525C5.175 9.375 5.25 9.2 5.25 9C5.25 8.8 5.175 8.625 5.025 8.475C4.875 8.325 4.7 8.25 4.5 8.25C4.3 8.25 4.125 8.325 3.975 8.475C3.825 8.625 3.75 8.8 3.75 9C3.75 9.2 3.825 9.375 3.975 9.525C4.125 9.675 4.3 9.75 4.5 9.75ZM4.5 5.65C4.7 5.65 4.875 5.575 5.025 5.425C5.175 5.275 5.25 5.1 5.25 4.9C5.25 4.7 5.175 4.525 5.025 4.375C4.875 4.225 4.7 4.15 4.5 4.15C4.3 4.15 4.125 4.225 3.975 4.375C3.825 4.525 3.75 4.7 3.75 4.9C3.75 5.1 3.825 5.275 3.975 5.425C4.125 5.575 4.3 5.65 4.5 5.65ZM7.8 13.85H13.9V12.35H7.8V13.85ZM7.8 9.75H13.9V8.25H7.8V9.75ZM7.8 5.65H13.9V4.15H7.8V5.65ZM1.5 18C1.1 18 0.75 17.85 0.45 17.55C0.15 17.25 0 16.9 0 16.5V1.5C0 1.1 0.15 0.75 0.45 0.45C0.75 0.15 1.1 0 1.5 0H16.5C16.9 0 17.25 0.15 17.55 0.45C17.85 0.75 18 1.1 18 1.5V16.5C18 16.9 17.85 17.25 17.55 17.55C17.25 17.85 16.9 18 16.5 18H1.5ZM1.5 16.5H16.5V1.5H1.5V16.5ZM1.5 1.5V16.5V1.5Z",
        fill: "currentColor"
      }));

    case "beginner":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        width: "12",
        height: "10",
        viewBox: "0 0 12 10",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("mask", {
        id: "path-1-inside-1_2168_1481",
        fill: "white"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5H3V9.5H0V6.5Z"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M4.5 3.5H7.5V9.5H4.5V3.5Z"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M9 0.5H12V9.5H9V0.5Z"
      })), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5H3V9.5H0V6.5Z",
        fill: "#282828"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5V5.75H-0.75V6.5H0ZM3 6.5H3.75V5.75H3V6.5ZM3 9.5V10.25H3.75V9.5H3ZM0 9.5H-0.75V10.25H0V9.5ZM4.5 3.5V2.75H3.75V3.5H4.5ZM7.5 3.5H8.25V2.75H7.5V3.5ZM7.5 9.5V10.25H8.25V9.5H7.5ZM4.5 9.5H3.75V10.25H4.5V9.5ZM9 0.5V-0.25H8.25V0.5H9ZM12 0.5H12.75V-0.25H12V0.5ZM12 9.5V10.25H12.75V9.5H12ZM9 9.5H8.25V10.25H9V9.5ZM0 7.25H3V5.75H0V7.25ZM2.25 6.5V9.5H3.75V6.5H2.25ZM3 8.75H0V10.25H3V8.75ZM0.75 9.5V6.5H-0.75V9.5H0.75ZM4.5 4.25H7.5V2.75H4.5V4.25ZM6.75 3.5V9.5H8.25V3.5H6.75ZM7.5 8.75H4.5V10.25H7.5V8.75ZM5.25 9.5V3.5H3.75V9.5H5.25ZM9 1.25H12V-0.25H9V1.25ZM11.25 0.5V9.5H12.75V0.5H11.25ZM12 8.75H9V10.25H12V8.75ZM9.75 9.5V0.5H8.25V9.5H9.75Z",
        fill: "#282828",
        mask: "url(#path-1-inside-1_2168_1481)"
      })));

    case "intermediate":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        width: "12",
        height: "10",
        viewBox: "0 0 12 10",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("mask", {
        id: "path-1-inside-1_2168_3193",
        fill: "white"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5H3V9.5H0V6.5Z"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M4.5 3.5H7.5V9.5H4.5V3.5Z"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M9 0.5H12V9.5H9V0.5Z"
      })), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5H3V9.5H0V6.5Z",
        fill: "#282828"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M4.5 3.5H7.5V9.5H4.5V3.5Z",
        fill: "#282828"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0 6.5V5.75H-0.75V6.5H0ZM3 6.5H3.75V5.75H3V6.5ZM3 9.5V10.25H3.75V9.5H3ZM0 9.5H-0.75V10.25H0V9.5ZM4.5 3.5V2.75H3.75V3.5H4.5ZM7.5 3.5H8.25V2.75H7.5V3.5ZM7.5 9.5V10.25H8.25V9.5H7.5ZM4.5 9.5H3.75V10.25H4.5V9.5ZM9 0.5V-0.25H8.25V0.5H9ZM12 0.5H12.75V-0.25H12V0.5ZM12 9.5V10.25H12.75V9.5H12ZM9 9.5H8.25V10.25H9V9.5ZM0 7.25H3V5.75H0V7.25ZM2.25 6.5V9.5H3.75V6.5H2.25ZM3 8.75H0V10.25H3V8.75ZM0.75 9.5V6.5H-0.75V9.5H0.75ZM4.5 4.25H7.5V2.75H4.5V4.25ZM6.75 3.5V9.5H8.25V3.5H6.75ZM7.5 8.75H4.5V10.25H7.5V8.75ZM5.25 9.5V3.5H3.75V9.5H5.25ZM9 1.25H12V-0.25H9V1.25ZM11.25 0.5V9.5H12.75V0.5H11.25ZM12 8.75H9V10.25H12V8.75ZM9.75 9.5V0.5H8.25V9.5H9.75Z",
        fill: "#282828",
        mask: "url(#path-1-inside-1_2168_3193)"
      }));

    case "advanced":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        width: "12",
        height: "10",
        viewBox: "0 0 12 10",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M0.375 6.875H2.625V9.125H0.375V6.875ZM4.875 3.875H7.125V9.125H4.875V3.875ZM9.375 0.875H11.625V9.125H9.375V0.875Z",
        fill: "#282828",
        stroke: "#282828",
        "stroke-width": "0.75"
      }));

    case "brain":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        class: "list-icon_brain",
        xmlns: "http://www.w3.org/2000/svg",
        width: "22",
        height: "24",
        viewBox: "0 0 22 24",
        fill: "none"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        "fill-rule": "currentcolor",
        "clip-rule": "evenodd",
        d: "M11.8462 1.50559C11.8462 1.30352 11.8462 0 12.9107 0C13.9752 0 22 2.5459 22 11.1843C22 19.8228 16.7218 23.2045 15.125 23.6592C13.5282 24.1139 11.8462 24.3998 11.8462 22.5812V1.50559ZM20.0636 16.4043C20.1535 16.185 20.0515 15.9331 19.8358 15.8417C19.6201 15.7504 19.3724 15.8541 19.2825 16.0734C19.1123 16.4889 18.8028 17.1602 18.4342 17.8088C18.0575 18.4715 17.6497 19.0544 17.2934 19.3442C17.1109 19.4927 17.0814 19.7634 17.2273 19.9489C17.3733 20.1344 17.6395 20.1645 17.822 20.0161C18.3118 19.6176 18.7855 18.91 19.1668 18.2393C19.5561 17.5543 19.8813 16.8491 20.0636 16.4043ZM17.1863 3.55798C17.2982 3.34941 17.5552 3.27256 17.7603 3.38632C18.8009 3.96346 19.2494 4.84299 19.3457 5.28377C19.3964 5.51569 19.2526 5.74548 19.0245 5.79701C18.7964 5.84855 18.5704 5.70232 18.5197 5.47041C18.475 5.26594 18.176 4.59687 17.3551 4.14161C17.15 4.02784 17.0744 3.76654 17.1863 3.55798ZM17.5577 10.4316C17.5577 10.194 17.3683 10.0014 17.1346 10.0014C16.901 10.0014 16.7115 10.194 16.7115 10.4316L16.7115 10.4649C16.7111 10.7924 16.7105 11.4143 16.9876 11.9193C17.1407 12.1982 17.3785 12.4448 17.7313 12.5906C18.0765 12.7333 18.4972 12.7652 18.9987 12.6847C19.4586 12.6108 19.7449 12.6523 19.9154 12.728C20.0678 12.7956 20.1576 12.9028 20.2094 13.0649C20.2666 13.2437 20.2777 13.4971 20.2255 13.8243C20.1741 14.1469 20.066 14.512 19.9149 14.8961C19.8281 15.1167 19.9336 15.367 20.1506 15.4553C20.3675 15.5435 20.6137 15.4362 20.7005 15.2156C20.8667 14.7932 20.9965 14.3652 21.0608 13.9619C21.1244 13.5631 21.1288 13.1578 21.0141 12.7989C20.8941 12.4233 20.6467 12.1138 20.2538 11.9394C19.8789 11.7731 19.4115 11.7474 18.8667 11.8349C18.466 11.8992 18.2109 11.8601 18.0499 11.7936C17.8964 11.7301 17.7975 11.6293 17.7265 11.5001C17.5654 11.2066 17.5577 10.7955 17.5577 10.4316ZM13.8558 11.2919C14.0894 11.2919 14.2789 11.4845 14.2789 11.7221V13.0252L14.2781 13.0378C14.2698 13.1808 14.3254 13.34 14.535 13.451C14.7701 13.5754 15.2423 13.6584 16.0847 13.4544C16.7252 13.2994 17.2751 13.3753 17.7057 13.645C18.131 13.9114 18.3866 14.3334 18.508 14.7701C18.629 15.2049 18.6251 15.6791 18.5102 16.0974C18.3966 16.5114 18.1597 16.9175 17.7709 17.1481C17.3522 17.3964 16.8785 17.4432 16.4357 17.4168C15.994 17.3903 15.5358 17.2871 15.1293 17.1937L15.0875 17.1841C14.6816 17.0907 14.3353 17.0111 14.0401 16.9913C13.7304 16.9705 13.582 17.0246 13.5052 17.0953C13.3767 17.2137 13.3004 17.3823 13.2598 17.6005C13.2208 17.8101 13.2209 18.0253 13.2211 18.2384L13.2212 18.2821C13.2211 18.7619 13.3516 19.8934 14.5648 20.4739C14.6074 20.4943 14.6451 20.521 14.6773 20.5523L15.3044 19.9793L14.6775 20.5525C14.8051 20.6769 14.8468 20.8747 14.7674 21.0463C14.6679 21.2612 14.4159 21.3535 14.2045 21.2523C14.1399 21.2214 14.0775 21.1893 14.0174 21.1562L13.3961 21.7243L13.4003 21.7279C13.4051 21.732 13.4132 21.7389 13.4244 21.7482C13.4469 21.7667 13.4819 21.7944 13.5276 21.8278C13.6195 21.895 13.7522 21.983 13.9128 22.0646C14.2414 22.2317 14.6432 22.3506 15.042 22.2695C15.8601 22.1032 16.2802 21.3621 16.0054 20.7099C15.8825 20.4183 15.6999 20.2336 15.5491 20.1211C15.4734 20.0647 15.4065 20.0272 15.3611 20.0047C15.3386 19.9935 15.3217 19.9863 15.3123 19.9824L15.3079 19.9806L15.3044 19.9793C15.0854 19.9026 14.9675 19.6606 15.0409 19.4366C15.1148 19.2112 15.3544 19.0894 15.5761 19.1645L15.4423 19.5726C15.5761 19.1645 15.5763 19.1646 15.5765 19.1646L15.5768 19.1648L15.5776 19.165L15.5794 19.1657L15.5837 19.1671C15.5868 19.1683 15.5906 19.1696 15.595 19.1713C15.6037 19.1745 15.6148 19.1788 15.6281 19.1842C15.6546 19.1951 15.6898 19.2105 15.7317 19.2313C15.8153 19.2727 15.9269 19.3359 16.0495 19.4274C16.2953 19.6107 16.5887 19.9098 16.7831 20.371C17.3218 21.649 16.4151 22.8677 15.208 23.1131C14.5491 23.2471 13.9461 23.0434 13.5343 22.8341C13.3247 22.7275 13.1533 22.6138 13.0337 22.5264C12.9737 22.4825 12.926 22.4448 12.8923 22.4171C12.8754 22.4032 12.862 22.3918 12.8523 22.3834C12.8475 22.3792 12.8435 22.3758 12.8405 22.3731L12.8367 22.3697L12.8348 22.368L12.8345 22.3678C12.8344 22.3677 12.8343 22.3676 13.1154 22.0461L12.8343 22.3676C12.6597 22.2097 12.6439 21.9379 12.7992 21.7603C12.9541 21.583 13.2209 21.5668 13.3955 21.7237L14.0169 21.1559C12.5281 20.3348 12.375 18.8545 12.375 18.2821C12.375 18.2655 12.375 18.2482 12.3749 18.2301C12.3744 18.0271 12.3737 17.734 12.4284 17.4405C12.4889 17.1152 12.6242 16.746 12.9371 16.4578C13.2724 16.1488 13.7134 16.1072 14.0958 16.1328C14.4597 16.1572 14.8661 16.2509 15.2448 16.3381L15.3158 16.3545C15.7317 16.4501 16.1237 16.5363 16.4854 16.5579C16.8459 16.5795 17.1286 16.533 17.3445 16.405C17.4861 16.321 17.6202 16.1396 17.6952 15.8661C17.7691 15.597 17.7716 15.2838 17.6938 15.0042C17.6165 14.7263 17.4683 14.5068 17.2619 14.3775C17.0607 14.2515 16.7507 14.1776 16.2807 14.2914C15.3461 14.5176 14.6373 14.4751 14.1443 14.2141C13.6311 13.9425 13.4108 13.4633 13.4327 13.0012V11.7221C13.4327 11.4845 13.6221 11.2919 13.8558 11.2919ZM18.8069 8.09049C18.9601 8.26984 19.2273 8.28891 19.4037 8.1331C19.5801 7.97729 19.5989 7.70559 19.4456 7.52625L18.6205 6.56064C18.3389 6.19718 17.8636 5.98235 17.301 6.11952C16.7605 6.25128 16.1979 6.69186 15.6384 7.48583C15.357 7.88517 15.0753 8.03605 14.8421 8.07508C14.6028 8.11515 14.3494 8.04827 14.1118 7.89006C13.8727 7.73081 13.6726 7.49273 13.5548 7.2403C13.4351 6.98385 13.4193 6.75749 13.472 6.59969C13.5663 6.31737 13.6661 6.25007 13.7159 6.22641C13.7893 6.19156 13.898 6.18193 14.1147 6.20333C14.1508 6.2069 14.1911 6.21195 14.235 6.21744C14.6194 6.26559 15.2755 6.34778 15.7645 5.7634C16.1987 5.24461 16.0558 4.62773 15.8684 4.21595C15.676 3.79316 15.3731 3.43094 15.2328 3.26676C15.0796 3.08741 14.8124 3.06834 14.636 3.22415C14.4596 3.37996 14.4408 3.65166 14.5941 3.831C14.7313 3.99156 14.9628 4.27458 15.1005 4.57718C15.2431 4.89078 15.2259 5.07941 15.1201 5.20587C14.9384 5.42293 14.7573 5.40436 14.3184 5.35937C14.2799 5.35542 14.2393 5.35125 14.1965 5.34703C13.9724 5.32489 13.6572 5.30468 13.3577 5.44697C13.0346 5.60045 12.8127 5.898 12.6708 6.32301C12.526 6.75639 12.6091 7.22087 12.7904 7.60919C12.9735 8.00153 13.2764 8.36214 13.6482 8.60974C14.0215 8.85837 14.4867 9.00651 14.9796 8.92399C15.4786 8.84044 15.9427 8.53113 16.3262 7.98694C16.8306 7.27127 17.2405 7.01897 17.4982 6.95615C17.7281 6.90011 17.8727 6.98329 17.9587 7.09674L17.9663 7.10676L18.8069 8.09049ZM13.7011 3.8858C13.8085 4.0925 13.7337 4.34946 13.5316 4.46306C13.3271 4.578 13.0697 4.50263 12.9567 4.29471L13.3269 4.08659C12.9567 4.29471 12.9566 4.29454 12.9565 4.29436L12.9563 4.29401L12.9559 4.29327L12.955 4.29168L12.9531 4.28811C12.9518 4.28554 12.9503 4.28262 12.9486 4.27933C12.9453 4.27276 12.9414 4.26475 12.9369 4.2553C12.9281 4.23643 12.9173 4.21182 12.9056 4.18161C12.882 4.12118 12.8545 4.0383 12.8307 3.93402C12.7829 3.72474 12.7507 3.43223 12.7938 3.06656C12.8756 2.37181 13.3845 1.77107 13.9469 1.43276C14.5038 1.0977 15.2775 0.929197 15.8959 1.36787C16.2686 1.63219 16.4372 2.04295 16.5164 2.33186C16.5578 2.4829 16.5797 2.61905 16.5915 2.71763C16.5974 2.76729 16.6009 2.80839 16.6029 2.83826C16.6039 2.85323 16.6046 2.86545 16.605 2.8746C16.6052 2.87918 16.6053 2.883 16.6054 2.88601L16.6056 2.88993L16.6056 2.89143L16.6056 2.89236C16.6056 2.89249 16.6056 2.89263 16.1827 2.90363L16.6056 2.89263C16.6116 3.13012 16.4271 3.32758 16.1935 3.33366C15.9605 3.33972 15.7667 3.15305 15.7598 2.91639L15.7597 2.91401C15.7596 2.91094 15.7593 2.90513 15.7587 2.8969C15.7576 2.88039 15.7555 2.85441 15.7515 2.82132C15.7435 2.75442 15.7286 2.66241 15.7013 2.56277C15.6431 2.35031 15.5473 2.16959 15.4118 2.07347C15.1833 1.91141 14.7983 1.92018 14.3777 2.1732C13.9626 2.42297 13.6749 2.82111 13.634 3.16885C13.6034 3.42868 13.6278 3.62062 13.6549 3.73939C13.6685 3.79916 13.6831 3.84121 13.6922 3.86471C13.6967 3.87628 13.6999 3.88334 13.7011 3.8858ZM12.5865 11.507L12.1636 11.5174C12.1692 11.7549 12.3632 11.9428 12.5968 11.937C12.8294 11.9313 13.0136 11.7357 13.0096 11.4996C13.0095 11.4984 13.0096 11.495 13.0097 11.4898C13.0099 11.4793 13.0107 11.4614 13.0126 11.4375C13.0166 11.3892 13.0255 11.3191 13.0449 11.238C13.0844 11.0727 13.1621 10.8849 13.3088 10.7357C13.7967 10.2396 14.577 10.2635 14.9337 10.868C15.0162 11.0077 15.0332 11.2328 14.9973 11.4871C14.9807 11.6042 14.9556 11.7089 14.9345 11.7843C14.924 11.8217 14.9148 11.8509 14.9085 11.8699C14.9054 11.8793 14.903 11.8861 14.9017 11.89L14.9007 11.8926L15.2754 12.0366C14.9007 11.8927 14.9007 11.8928 14.9007 11.8928L14.9004 11.8936C14.8185 12.1156 14.9287 12.3633 15.147 12.4471C15.3656 12.5311 15.6097 12.419 15.6923 12.1967L15.2965 12.0447C15.6923 12.1967 15.6923 12.1966 15.6924 12.1965L15.6925 12.1963L15.6927 12.1957L15.6931 12.1944L15.6945 12.1908L15.6984 12.1798C15.7015 12.1709 15.7057 12.1587 15.7107 12.1437C15.7206 12.1136 15.7338 12.0716 15.7482 12.0201C15.7769 11.9178 15.8115 11.7742 15.8348 11.6094C15.8786 11.2997 15.8956 10.8258 15.6593 10.4253C14.9534 9.22916 13.4918 9.33298 12.7105 10.1274C12.419 10.4237 12.2851 10.7736 12.2227 11.0346C12.1911 11.1667 12.1763 11.2819 12.1694 11.3657C12.166 11.4078 12.1644 11.4426 12.1638 11.4683C12.1635 11.4812 12.1634 11.4918 12.1634 11.5001C12.1634 11.5042 12.1634 11.5077 12.1635 11.5106L12.1635 11.5145L12.1636 11.5161L12.1636 11.5168L12.1636 11.5171C12.1636 11.5173 12.1636 11.5174 12.5865 11.507ZM20.3248 6.40409C20.1817 6.2163 19.9159 6.18205 19.7312 6.32758C19.5466 6.47309 19.5129 6.74323 19.6559 6.93101L19.6567 6.93206L19.6612 6.93798C19.6653 6.94353 19.6717 6.95222 19.6802 6.96378C19.6971 6.98693 19.7219 7.02143 19.7521 7.06505C19.8127 7.15264 19.8938 7.2752 19.9761 7.4151C20.1522 7.71448 20.2905 8.02251 20.3095 8.23104C20.3816 9.02538 19.5936 9.56091 18.8739 9.27761C18.6929 9.20637 18.4866 9.01296 18.3039 8.78445C18.2186 8.67773 18.1488 8.57654 18.1004 8.50211C18.0763 8.46511 18.0579 8.43528 18.0459 8.41537C18.0399 8.40543 18.0355 8.39801 18.0329 8.39346L18.03 8.38855L18.0299 8.38828C17.9132 8.18277 17.6548 8.11211 17.4525 8.2305C17.2499 8.34898 17.1802 8.61197 17.2968 8.81789L17.6635 8.60335C17.2968 8.81789 17.2967 8.81781 17.2968 8.81789L17.2969 8.81822L17.2978 8.81969L17.2995 8.82273L17.3051 8.83239C17.3098 8.84037 17.3163 8.85139 17.3245 8.86508C17.341 8.89244 17.3646 8.93063 17.3946 8.97668C17.4542 9.06836 17.5404 9.19338 17.6473 9.32709C17.849 9.57943 18.1716 9.92372 18.5684 10.0799C19.7747 10.5547 21.2915 9.6869 21.1521 8.15194C21.114 7.73318 20.8822 7.27925 20.7023 6.97351C20.6066 6.81085 20.5134 6.67005 20.4441 6.56993C20.4093 6.51969 20.3802 6.47924 20.3595 6.4509C20.3492 6.43672 20.3409 6.42554 20.335 6.41765L20.328 6.4083L20.3259 6.40554L20.325 6.40432C20.3249 6.40427 20.3248 6.40409 19.9904 6.66759L20.3248 6.40409Z",
        fill: "white"
      }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M10.1538 1.50559C10.1538 1.30352 10.1538 0 9.08933 0C8.02481 0 0 2.5459 0 11.1843C0 19.8228 5.27823 23.2045 6.875 23.6592C8.47177 24.1139 10.1538 24.3998 10.1538 22.5812V1.50559ZM1.93639 16.4043C1.84652 16.185 1.94852 15.9331 2.1642 15.8417C2.37989 15.7504 2.62759 15.8541 2.71746 16.0734C2.88774 16.4889 3.19717 17.1602 3.56582 17.8088C3.94254 18.4715 4.35028 19.0544 4.7066 19.3442C4.88906 19.4927 4.91864 19.7634 4.77268 19.9489C4.62671 20.1344 4.36047 20.1645 4.17801 20.0161C3.68818 19.6176 3.21451 18.91 2.83322 18.2393C2.44386 17.5543 2.11867 16.8491 1.93639 16.4043ZM4.81373 3.55798C4.70184 3.34941 4.44484 3.27256 4.23972 3.38632C3.19907 3.96346 2.75064 4.84299 2.65431 5.28377C2.60362 5.51569 2.74743 5.74548 2.97553 5.79701C3.20362 5.84855 3.42962 5.70232 3.48031 5.47041C3.525 5.26594 3.824 4.59687 4.6449 4.14161C4.85003 4.02784 4.92561 3.76654 4.81373 3.55798ZM4.44231 10.4316C4.44231 10.194 4.63173 10.0014 4.86538 10.0014C5.09904 10.0014 5.28846 10.194 5.28846 10.4316L5.28849 10.4649C5.28885 10.7924 5.28955 11.4143 5.01238 11.9193C4.85934 12.1982 4.6215 12.4448 4.26872 12.5906C3.9235 12.7333 3.50277 12.7652 3.00132 12.6847C2.54135 12.6108 2.25512 12.6523 2.08462 12.728C1.93216 12.7956 1.84239 12.9028 1.79058 13.0649C1.7334 13.2437 1.72231 13.4971 1.77445 13.8243C1.82586 14.1469 1.93401 14.512 2.08512 14.8961C2.1719 15.1167 2.06638 15.367 1.84943 15.4553C1.63249 15.5435 1.38627 15.4362 1.29949 15.2156C1.13329 14.7932 1.00346 14.3652 0.939191 13.9619C0.875645 13.5631 0.871164 13.1578 0.98586 12.7989C1.10593 12.4233 1.3533 12.1138 1.74621 11.9394C2.12108 11.7731 2.58845 11.7474 3.13329 11.8349C3.53396 11.8992 3.78906 11.8601 3.95013 11.7936C4.10363 11.7301 4.20254 11.6293 4.27349 11.5001C4.43458 11.2066 4.44231 10.7955 4.44231 10.4316ZM8.14423 11.2919C7.91057 11.2919 7.72115 11.4845 7.72115 11.7221V13.0252L7.72188 13.0378C7.73015 13.1808 7.67464 13.34 7.46497 13.451C7.2299 13.5754 6.75767 13.6584 5.9153 13.4544C5.27476 13.2994 4.72494 13.3753 4.29434 13.645C3.86902 13.9114 3.61339 14.3334 3.49195 14.7701C3.37103 15.2049 3.37494 15.6791 3.48976 16.0974C3.60341 16.5114 3.8403 16.9175 4.22913 17.1481C4.64781 17.3964 5.12152 17.4432 5.5643 17.4168C6.00596 17.3903 6.46415 17.2871 6.87075 17.1937L6.91253 17.1841C7.31845 17.0907 7.6647 17.0111 7.95991 16.9913C8.26955 16.9705 8.418 17.0246 8.49476 17.0953C8.62332 17.2137 8.69961 17.3823 8.74023 17.6005C8.77924 17.8101 8.77905 18.0253 8.77887 18.2384L8.77885 18.2821C8.77885 18.7619 8.64843 19.8934 7.43524 20.4739C7.39263 20.4943 7.35492 20.521 7.32268 20.5523L6.69559 19.9793L7.32248 20.5525C7.19493 20.6769 7.15318 20.8747 7.23258 21.0463C7.33207 21.2612 7.58411 21.3535 7.79553 21.2523C7.86012 21.2214 7.92246 21.1893 7.98261 21.1562L8.60386 21.7243L8.59967 21.7279C8.59493 21.732 8.58684 21.7389 8.57559 21.7482C8.55307 21.7667 8.51814 21.7944 8.47244 21.8278C8.3805 21.895 8.24783 21.983 8.08724 22.0646C7.75862 22.2317 7.35679 22.3506 6.95798 22.2695C6.13995 22.1032 5.71976 21.3621 5.99464 20.7099C6.11755 20.4183 6.30013 20.2336 6.45091 20.1211C6.52662 20.0647 6.59353 20.0272 6.63887 20.0047C6.66143 19.9935 6.67827 19.9863 6.68771 19.9824L6.69212 19.9806L6.69559 19.9793C6.91463 19.9026 7.03249 19.6606 6.95906 19.4366C6.88517 19.2112 6.64558 19.0894 6.42391 19.1645L6.55769 19.5726C6.42391 19.1645 6.42373 19.1646 6.42355 19.1646L6.42317 19.1648L6.42237 19.165L6.4206 19.1657L6.41634 19.1671C6.41318 19.1683 6.40941 19.1696 6.40504 19.1713C6.3963 19.1745 6.38517 19.1788 6.3719 19.1842C6.34539 19.1951 6.31018 19.2105 6.26828 19.2313C6.18472 19.2727 6.07314 19.3359 5.95053 19.4274C5.70467 19.6107 5.4113 19.9098 5.2169 20.371C4.67824 21.649 5.5849 22.8677 6.79203 23.1131C7.45091 23.2471 8.05389 23.0434 8.46565 22.8341C8.67526 22.7275 8.84668 22.6138 8.96628 22.5264C9.02634 22.4825 9.07405 22.4448 9.10771 22.4171C9.12457 22.4032 9.13796 22.3918 9.14768 22.3834C9.15254 22.3792 9.15649 22.3758 9.1595 22.3731L9.16331 22.3697L9.16524 22.368L9.16548 22.3678C9.16559 22.3677 9.1657 22.3676 8.88462 22.0461L9.1657 22.3676C9.34034 22.2097 9.35607 21.9379 9.20084 21.7603C9.04588 21.583 8.77915 21.5668 8.60449 21.7237L7.98314 21.1559C9.47192 20.3348 9.62501 18.8545 9.625 18.2821C9.625 18.2655 9.62504 18.2482 9.62508 18.2301C9.62556 18.0271 9.62625 17.734 9.57162 17.4405C9.51106 17.1152 9.3758 16.746 9.06293 16.4578C8.7276 16.1488 8.2866 16.1072 7.90419 16.1328C7.54029 16.1572 7.13389 16.2509 6.75521 16.3381L6.6842 16.3545C6.26833 16.4501 5.87625 16.5363 5.51459 16.5579C5.15406 16.5795 4.87141 16.533 4.65548 16.405C4.51391 16.321 4.37982 16.1396 4.30477 15.8661C4.2309 15.597 4.2284 15.2838 4.30618 15.0042C4.38345 14.7263 4.53165 14.5068 4.73813 14.3775C4.93932 14.2515 5.24927 14.1776 5.71931 14.2914C6.65385 14.5176 7.36271 14.4751 7.85569 14.2141C8.36893 13.9425 8.58917 13.4633 8.5673 13.0012V11.7221C8.5673 11.4845 8.37788 11.2919 8.14423 11.2919ZM3.19313 8.09049C3.03989 8.26984 2.77267 8.28891 2.59628 8.1331C2.41989 7.97729 2.40113 7.70559 2.55438 7.52625L3.37946 6.56064C3.66105 6.19718 4.13637 5.98235 4.69904 6.11952C5.2395 6.25128 5.80205 6.69186 6.36161 7.48583C6.64304 7.88517 6.92471 8.03605 7.15787 8.07508C7.39715 8.11515 7.65061 8.04827 7.88816 7.89006C8.12727 7.73081 8.32739 7.49273 8.44522 7.2403C8.56493 6.98385 8.58074 6.75749 8.52803 6.59969C8.43372 6.31737 8.33391 6.25007 8.28411 6.22641C8.21075 6.19156 8.10198 6.18193 7.88527 6.20333C7.84916 6.2069 7.80886 6.21195 7.76504 6.21744C7.38063 6.26559 6.72453 6.34778 6.23548 5.7634C5.80132 5.24461 5.94423 4.62773 6.13159 4.21595C6.32396 3.79316 6.62687 3.43094 6.76716 3.26676C6.9204 3.08741 7.18762 3.06834 7.36401 3.22415C7.5404 3.37996 7.55916 3.65166 7.40592 3.831C7.26873 3.99156 7.03723 4.27458 6.89954 4.57718C6.75686 4.89078 6.77408 5.07941 6.87991 5.20587C7.06156 5.42293 7.24274 5.40436 7.68156 5.35937C7.72012 5.35542 7.76074 5.35125 7.80345 5.34703C8.0276 5.32489 8.34282 5.30468 8.64231 5.44697C8.96536 5.60045 9.18726 5.898 9.32923 6.32301C9.474 6.75639 9.39091 7.22087 9.20965 7.60919C9.02651 8.00153 8.72357 8.36214 8.35181 8.60974C7.9785 8.85837 7.51329 9.00651 7.02039 8.92399C6.52136 8.84044 6.05732 8.53113 5.6738 7.98694C5.16943 7.27127 4.75946 7.01897 4.50175 6.95615C4.27189 6.90011 4.12728 6.98329 4.0413 7.09674L4.03371 7.10676L3.19313 8.09049ZM8.29892 3.8858C8.19152 4.0925 8.26629 4.34946 8.46839 4.46306C8.67288 4.578 8.93029 4.50263 9.04334 4.29471L8.67308 4.08659C9.04334 4.29471 9.04344 4.29454 9.04353 4.29436L9.04373 4.29401L9.04413 4.29327L9.04498 4.29168L9.04687 4.28811C9.04821 4.28554 9.04973 4.28262 9.05139 4.27933C9.05471 4.27276 9.05864 4.26475 9.06305 4.2553C9.07188 4.23643 9.08266 4.21182 9.09443 4.18161C9.11798 4.12118 9.14551 4.0383 9.16933 3.93402C9.21714 3.72474 9.24926 3.43223 9.2062 3.06656C9.12438 2.37181 8.61549 1.77107 8.05312 1.43276C7.49616 1.0977 6.72253 0.929197 6.10409 1.36787C5.73145 1.63219 5.56279 2.04295 5.48362 2.33186C5.44223 2.4829 5.42026 2.61905 5.40849 2.71763C5.40256 2.76729 5.3991 2.80839 5.3971 2.83826C5.39609 2.85323 5.39544 2.86545 5.39503 2.8746C5.39483 2.87918 5.39468 2.883 5.39457 2.88601L5.39444 2.88993L5.3944 2.89143L5.39438 2.89236C5.39437 2.89249 5.39437 2.89263 5.81731 2.90363L5.39437 2.89263C5.38839 3.13012 5.5729 3.32758 5.80649 3.33366C6.03949 3.33972 6.23331 3.15305 6.2402 2.91639L6.2403 2.91401C6.24044 2.91094 6.24073 2.90513 6.24128 2.8969C6.24239 2.88039 6.24452 2.85441 6.24848 2.82132C6.25646 2.75442 6.27143 2.66241 6.29873 2.56277C6.35695 2.35031 6.45272 2.16959 6.58822 2.07347C6.81669 1.91141 7.20165 1.92018 7.62225 2.1732C8.03745 2.42297 8.32509 2.82111 8.36604 3.16885C8.39664 3.42868 8.37225 3.62062 8.34512 3.73939C8.33146 3.79916 8.31693 3.84121 8.30777 3.86471C8.30326 3.87628 8.30006 3.88334 8.29892 3.8858ZM9.41347 11.507L9.83642 11.5174C9.83075 11.7549 9.63679 11.9428 9.4032 11.937C9.17062 11.9313 8.98644 11.7357 8.99045 11.4996C8.99045 11.4984 8.99044 11.495 8.99031 11.4898C8.99005 11.4793 8.98934 11.4614 8.98737 11.4375C8.9834 11.3892 8.97453 11.3191 8.95513 11.238C8.91557 11.0727 8.83793 10.8849 8.69123 10.7357C8.2033 10.2396 7.42298 10.2635 7.06627 10.868C6.9838 11.0077 6.9668 11.2328 7.00272 11.4871C7.01928 11.6042 7.04441 11.7089 7.06554 11.7843C7.07601 11.8217 7.08523 11.8509 7.09149 11.8699C7.09461 11.8793 7.09697 11.8861 7.09834 11.89L7.09926 11.8926L6.72464 12.0366C7.09926 11.8927 7.0993 11.8928 7.09933 11.8928L7.09963 11.8936C7.18148 12.1156 7.07125 12.3633 6.85302 12.4471C6.63444 12.5311 6.3903 12.419 6.30771 12.1967L6.70349 12.0447C6.30771 12.1967 6.30767 12.1966 6.30763 12.1965L6.30754 12.1963L6.30734 12.1957L6.30685 12.1944L6.30553 12.1908L6.30163 12.1798C6.29849 12.1709 6.29431 12.1587 6.28933 12.1437C6.2794 12.1136 6.26622 12.0716 6.25178 12.0201C6.2231 11.9178 6.18846 11.7742 6.16517 11.6094C6.1214 11.2997 6.1044 10.8258 6.3407 10.4253C7.04657 9.22916 8.50824 9.33298 9.28955 10.1274C9.58096 10.4237 9.71485 10.7736 9.77731 11.0346C9.80892 11.1667 9.82367 11.2819 9.83057 11.3657C9.83404 11.4078 9.83557 11.4426 9.8362 11.4683C9.83652 11.4812 9.83661 11.4918 9.8366 11.5001C9.8366 11.5042 9.83658 11.5077 9.83654 11.5106L9.83648 11.5145L9.83645 11.5161L9.83643 11.5168L9.83643 11.5171C9.83642 11.5173 9.83642 11.5174 9.41347 11.507ZM1.6752 6.40409C1.81833 6.2163 2.08409 6.18205 2.26877 6.32758C2.45343 6.47309 2.48714 6.74323 2.34408 6.93101L2.34329 6.93206L2.33885 6.93798C2.3347 6.94353 2.32825 6.95222 2.31981 6.96378C2.30291 6.98693 2.27812 7.02143 2.24793 7.06505C2.18731 7.15264 2.10617 7.2752 2.02388 7.4151C1.84777 7.71448 1.70945 8.02251 1.69052 8.23104C1.61838 9.02538 2.40637 9.56091 3.12611 9.27761C3.30708 9.20637 3.51338 9.01296 3.69606 8.78445C3.78137 8.67773 3.85123 8.57654 3.89964 8.50211C3.9237 8.46511 3.94211 8.43528 3.95411 8.41537C3.96011 8.40543 3.96448 8.39801 3.96714 8.39346L3.96998 8.38855L3.97013 8.38828C4.08681 8.18277 4.34519 8.11211 4.54754 8.2305C4.75007 8.34898 4.81978 8.61197 4.70324 8.81789L4.33654 8.60335C4.70324 8.81789 4.70329 8.81781 4.70324 8.81789L4.70305 8.81822L4.70221 8.81969L4.70047 8.82273L4.69488 8.83239C4.69023 8.84037 4.68372 8.85139 4.67547 8.86508C4.65897 8.89244 4.63537 8.93063 4.60542 8.97668C4.54579 9.06836 4.45956 9.19338 4.35267 9.32709C4.15095 9.57943 3.8284 9.92372 3.43159 10.0799C2.22534 10.5547 0.708549 9.6869 0.847946 8.15194C0.885976 7.73318 1.11785 7.27925 1.29769 6.97351C1.39337 6.81085 1.48665 6.67005 1.55594 6.56993C1.59071 6.51969 1.61976 6.47924 1.64045 6.4509C1.65081 6.43672 1.6591 6.42554 1.66499 6.41765L1.67201 6.4083L1.6741 6.40554L1.67502 6.40432L1.6752 6.40409C1.67525 6.40403 1.6752 6.40409 2.00961 6.66759L1.6752 6.40409Z",
        fill: "white"
      }));

    case "star":
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        fill: "currentColor",
        xmlns: "http://www.w3.org/2000/svg"
      }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
        d: "M8 12.4298L11.9892 15.3326C12.6217 15.8029 13.4811 15.1704 13.2379 14.4245L11.7135 9.73793L15.6541 6.9325C16.3028 6.47844 15.9785 5.45681 15.1839 5.45681H10.3514L8.77839 0.559465C8.53514 -0.186488 7.48108 -0.186488 7.23783 0.559465L5.64863 5.45681H0.816148C0.0215454 5.45681 -0.302782 6.47844 0.345873 6.9325L4.28645 9.73793L2.76211 14.4245C2.51887 15.1704 3.37833 15.7866 4.01077 15.3326L8 12.4298Z",
        fill: "currentColor"
      }));

    default:
      return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);
  }
};

/***/ }),

/***/ "./src/pages/components/input.js":
/*!***************************************!*\
  !*** ./src/pages/components/input.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CategoryInput": () => (/* binding */ CategoryInput),
/* harmony export */   "ImageInput": () => (/* binding */ ImageInput),
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "UploadFileButton": () => (/* binding */ UploadFileButton),
/* harmony export */   "inputJquery": () => (/* binding */ inputJquery)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_2__);



const UploadFileButton = () => {
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", {
    class: "right btn ph-1 pv-04 center-items ml-1 btn-yellow"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("svg", {
    width: "14",
    class: "right",
    height: "17",
    viewBox: "0 0 14 17",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("path", {
    d: "M4 13H10V7H14L7 0L0 7H4V13ZM7 2.83L9.17 5H8V11H6V5H4.83L7 2.83ZM0 15H14V17H0V15Z",
    fill: "#282828"
  })));
};
const inputJquery = {
  /**
   * @param {('red'|'blue'|'yellow'|'transparent')} 
   * @memberof inputJquery
   */
  makeOutline() {
    let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'red';
    jquery__WEBPACK_IMPORTED_MODULE_2___default()("form").find(".input").each(function () {
      if (jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).prop("required")) {
        jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).on({
          focusout: e => {
            if (e.target.value == "") {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("border-" + color);
            }
          },
          change: e => {
            if (e.target.value == "") {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).addClass("border border-" + color);
            } else {
              jquery__WEBPACK_IMPORTED_MODULE_2___default()(this).removeClass("border border-" + color);
            }
          }
        });
      }
    });
  }

};
const Input = _ref => {
  let {
    type = 'text',
    onChange,
    required = false,
    name,
    placeholder = '',
    headerText = '',
    className = '',
    value,
    defaultValue = ''
  } = _ref;
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", {
    className: className
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("p", {
    class: "text-title text-xsm bold"
  }, headerText ? headerText : name), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("input", {
    defaultValue: defaultValue,
    name: name,
    required: required,
    value: value,
    className: "input",
    type: type,
    onChange: onChange,
    placeholder: placeholder,
    min: "1"
  })));
};
/**
 * 
 * @param {Object} props 
//  * @param {('image'|'banner'|'avatar')} props.imageType 
 * @param {('ref.current')} props.imageRef
 * @param {string} props.headerText
 * @param {string} props.imageLink
 * @returns 
 */

const ImageInput = _ref2 => {
  let {
    imageType,
    imageRef,
    imageLink,
    headerText = ''
  } = _ref2;

  if (imageType == 'image') {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", {
      onClick: () => imageRef.click()
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("p", {
      class: "text-title text-xsm bold"
    }, headerText), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      class: "inputIcon course-image clearfix"
    }, typeof imageLink != "object" ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "flex flex-between"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "",
      src: imageLink
    })) : (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("input", {
      disabled: true,
      value: imageRef?.files.length > 0 ? imageRef?.files[0].name : null
    }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "flex flex-between "
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "",
      src: imageRef?.files.length > 0 ? URL.createObjectURL(imageLink[0]) : null
    }))), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(UploadFileButton, null)));
  }

  if (imageType == 'banner') {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", {
      className: "clearfix griditem-1-2  w-100",
      onClick: () => imageRef.click()
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("p", {
      class: "text-title w-100 text-xsm bold"
    }, headerText), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      class: "inputIcon course-banner clearfix "
    }, typeof imageLink == "string" ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "w-100 h-20 bg-gray image-fit"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "w-100",
      src: imageLink
    })) : (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "defaultBanner"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("input", {
      className: "",
      disabled: true,
      value: imageRef?.files.length > 0 ? imageRef?.files[0].name : null
    }), imageRef?.files.length > 0 ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: `w-100  image-fit h-20`
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "w-100 ",
      src: URL.createObjectURL(imageLink[0])
    })) : null), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(UploadFileButton, null)));
  }

  if (imageType == 'avatar') {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", {
      className: "clearfix w-100",
      onClick: () => imageRef.click()
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("p", {
      class: "text-title text-xsm bold"
    }, "instructor Image Preview"), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      class: "inputIcon course-image avatar clearfix"
    }, typeof imageLink == "string" ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "flex flex-between"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "profile-image",
      src: imageLink
    })) : (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("input", {
      disabled: true,
      value: imageRef?.files.length > 0 ? imageRef?.files[0].name : null
    }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "flex flex-between w-50"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("img", {
      className: "profile-image",
      src: imageRef?.files.length > 0 ? URL.createObjectURL(imageLink[0]) : null
    }))), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(UploadFileButton, null)));
  }

  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", null);
};
const CategoryInput = _ref3 => {
  let {
    categories,
    setCategories
  } = _ref3;
  const [currCat, setCurrCat] = useState([]);
};

/***/ }),

/***/ "./src/pages/components/searchForm.js":
/*!********************************************!*\
  !*** ./src/pages/components/searchForm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SearchForm": () => (/* binding */ SearchForm)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils */ "./src/utils.js");



const SearchForm = () => {
  const [term, setTerm] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("");

  const handleSubmit = e => {
    e.preventDefault(); // console.log(removeTags(term))

    window.location.href = ioldata.root_url + "/search/?term=" + (0,_utils__WEBPACK_IMPORTED_MODULE_2__.removeTags)(term);
  };

  const handleChange = e => {
    console.log(e);
    setTerm(e.target.value);
  };

  console.log(ioldata.root_url);
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("form", {
    method: "GET",
    onSubmit: handleSubmit,
    action: "http://localhost:10010/search",
    class: "griditem-2-5 w-100 "
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    class: "w-100 search-tab"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    class: "search-input  w-60"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("i", {
    class: "searchicon bi bi-search yellow"
  }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("input", {
    onChange: handleChange,
    id: "search_input",
    autocomplete: "off",
    name: "term",
    class: "",
    placeholder: "What do you want to learn?"
  })), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("button", {
    id: "header-search-button",
    class: "btn btn-sm btn-yellow btn-round_right w-30",
    type: "submit"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("i", {
    class: "searchicon bi bi-search"
  }))));
};

/***/ }),

/***/ "./src/pages/components/ui/Tooltip.js":
/*!********************************************!*\
  !*** ./src/pages/components/ui/Tooltip.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tooltip": () => (/* binding */ Tooltip)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _hooks_useDisclosure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../hooks/useDisclosure */ "./src/pages/hooks/useDisclosure.js");



const Tooltip = _ref => {
  let {
    position = "right",
    textColor = "black",
    color = "gray",
    children,
    text = ""
  } = _ref;
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    className: "tp"
  }, text, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("span", {
    className: ` tp-text_${position} bg-${color} ${textColor}  zoom-in`
  }, children));
};

/***/ }),

/***/ "./src/pages/components/ui/menus/Header.js":
/*!*************************************************!*\
  !*** ./src/pages/components/ui/menus/Header.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Header": () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _hooks_useDisclosure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useDisclosure */ "./src/pages/hooks/useDisclosure.js");
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu */ "./src/pages/components/ui/menus/Menu.js");
/* harmony import */ var _searchForm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../searchForm */ "./src/pages/components/searchForm.js");
/* harmony import */ var _Tooltip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Tooltip */ "./src/pages/components/ui/Tooltip.js");
/* harmony import */ var _wordpress_api_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @wordpress/api-fetch */ "@wordpress/api-fetch");
/* harmony import */ var _wordpress_api_fetch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_wordpress_api_fetch__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../utils */ "./src/utils.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Icon */ "./src/pages/components/Icon.js");
/* harmony import */ var _utilComponents_User_HeaderButtons__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utilComponents/User/HeaderButtons */ "./src/pages/components/utilComponents/User/HeaderButtons.js");
/* harmony import */ var _MegaMenu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MegaMenu */ "./src/pages/components/ui/menus/MegaMenu.js");











const Header = _ref => {
  let {
    innerHTML
  } = _ref;
  const [cat, setCat] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
  const {
    isOpen,
    onClose,
    onOpen,
    ontoggle
  } = (0,_hooks_useDisclosure__WEBPACK_IMPORTED_MODULE_2__.useDisclosure)();
  const [type, setType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("");

  const handlemenu = e => {
    if (e.target.id == type) {
      setType("");
      return onClose();
    }

    setType(e.target.id);
  };

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (type !== "") {
      onOpen();
    }
  }, [type]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    async function go() {
      const data = await _wordpress_api_fetch__WEBPACK_IMPORTED_MODULE_6___default()({
        path: `/wp/v2/categories`,
        method: "GET",
        headers: {
          "X-WP-Nonce": ioldata.nonce
        }
      });
      console.log(data);
      setCat(data.filter(item => {
        return item.count.courses > 0 && item.slug !== "blogs";
      }));
    }

    go();
  }, []);
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    id: "header_mobile",
    class: " flex header_background flex-row flex-evenly center-items w-100"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("i", {
    onClick: handlemenu,
    id: "search_menu",
    class: `bi text-md ${isOpen == true && type == "search_menu" ? "bi-x-lg white" : "bi-search yellow"} `
  }), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
    class: "text-title flex white flex-row center-items text-md "
  }, "I", (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon__WEBPACK_IMPORTED_MODULE_8__.Icon, {
    iconName: "brain"
  }), "L"), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("i", {
    id: "mega_menu",
    onClick: handlemenu,
    class: `bi ${isOpen == true && type == "mega_menu" ? "bi-x-lg" : "bi-list"} white text-md`
  })), type == "mega_menu" && isOpen == true ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_MegaMenu__WEBPACK_IMPORTED_MODULE_10__.MegaMenu, {
    categories: cat
  }) : type == "search_menu" && isOpen == true ? (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    className: " p-2 w-100 "
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_searchForm__WEBPACK_IMPORTED_MODULE_4__.SearchForm, null)) : null);
};

/***/ }),

/***/ "./src/pages/components/ui/menus/MegaMenu.js":
/*!***************************************************!*\
  !*** ./src/pages/components/ui/menus/MegaMenu.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MegaMenu": () => (/* binding */ MegaMenu)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utilComponents_buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utilComponents/buttons */ "./src/pages/components/utilComponents/buttons.js");
/* harmony import */ var _utilComponents_User_HeaderButtons__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utilComponents/User/HeaderButtons */ "./src/pages/components/utilComponents/User/HeaderButtons.js");




const MegaMenu = _ref => {
  let {
    categories
  } = _ref;
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    className: " container black p-2 mt-2 w-80 "
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("ul", {
    className: "min-list mt-04"
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("li", {
    className: "text-title text-center black bold"
  }, "Categories"), categories.map((v, key) => (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("li", {
    key: key
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
    className: "text-center",
    href: v.link
  }, v.name)))), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_utilComponents_buttons__WEBPACK_IMPORTED_MODULE_2__.DashBoardButton, null), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_utilComponents_User_HeaderButtons__WEBPACK_IMPORTED_MODULE_3__.HeaderButtons, null));
};

/***/ }),

/***/ "./src/pages/components/ui/menus/Menu.js":
/*!***********************************************!*\
  !*** ./src/pages/components/ui/menus/Menu.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Menu": () => (/* binding */ Menu)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _hooks_useOutsideClick__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useOutsideClick */ "./src/pages/hooks/useOutsideClick.js");



const Menu = _ref => {
  let {
    isOpen,
    onClose,
    children,
    className
  } = _ref;
  const wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);

  const closeMenu = () => {
    wrapperRef.current.classList.remove("animate__bounceInLeft");
    wrapperRef.current.classList.add("animate__slideOutLeft");
    onClose();
  };

  (0,_hooks_useOutsideClick__WEBPACK_IMPORTED_MODULE_2__.useOutsudeClick)(wrapperRef, closeMenu);

  if (isOpen == true) {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("aside", {
      className: `menu pt-3 pl-04  ${className} `
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      ref: wrapperRef,
      className: "bg-white animate__animated animate__bounceInLeft animate__faster container black min-w-200 w-30"
    }, children, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "center pb-2"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("button", {
      onClick: closeMenu,
      className: "btn white m-auto btn-red"
    }, "Cancel"))));
  }

  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);
};

/***/ }),

/***/ "./src/pages/components/ui/menus/Nav.js":
/*!**********************************************!*\
  !*** ./src/pages/components/ui/menus/Nav.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Nav": () => (/* binding */ Nav)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _hooks_useDisclosure__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../hooks/useDisclosure */ "./src/pages/hooks/useDisclosure.js");
/* harmony import */ var _Menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Menu */ "./src/pages/components/ui/menus/Menu.js");
/* harmony import */ var _Icon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Icon */ "./src/pages/components/Icon.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../utils */ "./src/utils.js");






const Nav = _ref => {
  let {
    innerHTML
  } = _ref;
  innerHTML = (0,_utils__WEBPACK_IMPORTED_MODULE_5__.remove_invisible_tag)(innerHTML);
  const {
    isOpen,
    onClose,
    onOpen,
    ontoggle
  } = (0,_hooks_useDisclosure__WEBPACK_IMPORTED_MODULE_2__.useDisclosure)();

  const openMenu = e => {
    e.preventDefault();
    ontoggle();
  };

  console.log(isOpen);
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("button", {
    className: "btn btn-transparent ",
    onClick: openMenu
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Icon__WEBPACK_IMPORTED_MODULE_4__.Icon, {
    iconName: "list"
  })), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_Menu__WEBPACK_IMPORTED_MODULE_3__.Menu, {
    className: "navigation-bar",
    isOpen: isOpen,
    onClose: onClose
  }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
    className: "m-1 mt-03 pb-2 ",
    dangerouslySetInnerHTML: {
      __html: innerHTML
    }
  })));
};

/***/ }),

/***/ "./src/pages/components/utilComponents/User/HeaderButtons.js":
/*!*******************************************************************!*\
  !*** ./src/pages/components/utilComponents/User/HeaderButtons.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderButtons": () => (/* binding */ HeaderButtons)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _buttons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../buttons */ "./src/pages/components/utilComponents/buttons.js");



const HeaderButtons = () => {
  if (ioldata.user_id == "0") {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("div", {
      className: "flex"
    }, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_buttons__WEBPACK_IMPORTED_MODULE_2__.ClaimCourseButton, null), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_buttons__WEBPACK_IMPORTED_MODULE_2__.DashBoardButton, null), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_buttons__WEBPACK_IMPORTED_MODULE_2__.CreateAccountLink, null));
  }

  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);
};

/***/ }),

/***/ "./src/pages/components/utilComponents/buttons.js":
/*!********************************************************!*\
  !*** ./src/pages/components/utilComponents/buttons.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClaimCourseButton": () => (/* binding */ ClaimCourseButton),
/* harmony export */   "CreateAccountLink": () => (/* binding */ CreateAccountLink),
/* harmony export */   "DashBoardButton": () => (/* binding */ DashBoardButton),
/* harmony export */   "LogInButton": () => (/* binding */ LogInButton)
/* harmony export */ });
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @wordpress/element */ "@wordpress/element");
/* harmony import */ var _wordpress_element__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


const ClaimCourseButton = _ref => {
  let {
    text = "Claim Your Course",
    color = "yellow",
    props
  } = _ref;
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
    className: `btn btn-${color} bold `,
    href: `${ioldata.root_url}/new-course`
  }, text);
};
const LogInButton = _ref2 => {
  let {
    text = "Log In",
    params = ""
  } = _ref2;
  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
    className: "btn btn-blue",
    href: `/register/?${params}`
  }, text);
};
const DashBoardButton = _ref3 => {
  let {} = _ref3;

  if (ioldata.user_id !== 0) {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
      href: ioldata.root_url + "/dashboard",
      className: "btn btn-blue white "
    }, "Dashboard");
  }

  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(LogInButton, null);
};
const CreateAccountLink = () => {
  if (ioldata.user_id !== 0) {
    return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("p", null, "Don't have an account?"), (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)("a", {
      className: "blue",
      href: `${ioldata.root_url}/register`
    }, "Create one"));
  }

  return (0,_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.createElement)(_wordpress_element__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);
};

/***/ }),

/***/ "./src/pages/hooks/useDisclosure.js":
/*!******************************************!*\
  !*** ./src/pages/hooks/useDisclosure.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useDisclosure": () => (/* binding */ useDisclosure)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useDisclosure() {
  let initialProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    defaultIsOpen: false
  };
  const [isOpen, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialProps.defaultIsOpen);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {}, [isOpen]);

  const onOpen = () => {
    return setOpen(true);
  };

  const onClose = () => {
    return setOpen(false);
  };

  const ontoggle = () => {
    console.trace("who called");
    console.log("asfd");

    if (isOpen == true) {
      return setOpen(false);
    } else {
      return setOpen(true);
    }
  };

  return {
    isOpen,
    onClose,
    onOpen,
    ontoggle
  };
}

/***/ }),

/***/ "./src/pages/hooks/useOutsideClick.js":
/*!********************************************!*\
  !*** ./src/pages/hooks/useOutsideClick.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useOutsudeClick": () => (/* binding */ useOutsudeClick)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useOutsudeClick(ref, callback) {
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    /**
     * Alert if clicked on outside of element
     */
    function handleClickOutside(event) {
      if (ref.current && !ref.current.contains(event.target)) {
        if (typeof callback == 'function') {
          callback(event.target);
        }
      }
    } // Bind the event listener


    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      // Unbind the event listener on clean up
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [ref]);
}

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fetchData": () => (/* binding */ fetchData),
/* harmony export */   "form": () => (/* binding */ form),
/* harmony export */   "formatter": () => (/* binding */ formatter),
/* harmony export */   "removeTags": () => (/* binding */ removeTags),
/* harmony export */   "remove_invisible_tag": () => (/* binding */ remove_invisible_tag),
/* harmony export */   "stringToHtml": () => (/* binding */ stringToHtml)
/* harmony export */ });
Array.prototype.toObj = function (delimiter) {
  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  const narr = this.reduce((curr, next) => {
    if (next.includes(delimiter)) {
      let [key, value] = next.split(delimiter);

      if (callback) {
        value = callback(value);
      }

      Object.assign(curr, {
        [key]: value
      });
    }

    return curr;
  }, {});
  return narr;
};

String.prototype.replaceLast = function (search, replace) {
  return this.replace(new RegExp(search + "([^" + search + "]*)$"), replace + "$1");
};

Set.prototype.difference = function (set) {
  if (!(set instanceof Set)) set = new Set(set);
  const nset = new Set();
  [...this].forEach(item => {
    if (!set.has(item)) {
      nset.add(item);
    }
  });
  return nset;
};

const form = {
  filledFields: obj => {
    const notFilled = Object.entries(obj).reduce((curr, next) => {
      let [key, value] = next;

      if (!value || value == []) {
        curr.push({
          [key]: value
        });
      }

      return curr;
    }, []);
    return notFilled;
  }
};
const formatter = {
  highlightsToArr: obj => {
    return Object.values(obj);
  },
  highlights: obj => {
    if (typeof obj !== "object") throw new Error("has to be an object");
    const narr = Object.entries(obj).reduce((curr, next) => {
      curr.push({
        id: [next[0] - 1],
        value: next[1]
      });
      return curr;
    }, []);
    return narr;
  },
  getUrlParams: () => {
    const params = window.location.search.substring(1).split("&").reduce((curr, next) => {
      const [key, value] = next.split("=");

      if (key && value) {
        Object.assign(curr, {
          [key]: Number(value) ? Number(value) : value
        });
      }

      return curr;
    }, {});
    return params;
  },
  getPageParams: () => {
    try {
      const item = document.querySelector(`#${ioldata.slug.replace(" ", "-")}`)?.className.split(" ").toObj("=", elem => Number(elem));
      return item ? item : {};
    } catch (err) {
      return {};
    }
  },
  getAllParams: () => {
    return { ...formatter.getUrlParams(),
      ...formatter.getPageParams()
    };
  },

  /**
   *
   *
   * @param {string[]} arr
   * @param {string} delimiter
   * @param {CallableFunction} callback
   * @returns {Object[]}
   */
  arrayToObj: function (arr, delimiter) {
    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    const narr = arr.reduce((curr, next) => {
      if (next.includes(delimiter)) {
        let [key, value] = next.split(delimiter);

        if (callback) {
          value = callback(value);
        }

        Object.assign(curr, {
          [key]: value
        });
      }

      return curr;
    }, {});
    return narr;
  }
};

var support = function () {
  if (!window.DOMParser) return false;
  const parser = new DOMParser();

  try {
    parser.parseFromString("x", "text/html");
  } catch (err) {
    return false;
  }

  return true;
};

const getIcons = function () {
  let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  console.log(typeof html);
};

const stringToHtml = function () {
  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  if (support) {
    const parser = new DOMParser();
    const html = parser.parseFromString(str, "text/html");
    return html.body;
  }

  const dom = document.createElement("div");
  dom.innerHTML = str;
  return dom;
};
const remove_invisible_tag = function () {
  let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  if (typeof html !== "string") {
    html = JSON.stringify(html);
  }

  html = html.replace('<div class="invisible">', "");
  html = html.replaceLast("</div>", "");
  return html;
};
const fetchData = {
  featuredImage: async function (id) {
    let siteUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "http://localhost:10016/";
    const data = await fetch(siteUrl + "wp-json/wp/v2/media/" + id);
    return data;
  }
};
const removeTags = str => {
  return str.replace(/(<([^>]+)>)/gi, "");
};

/***/ }),

/***/ "./css/style.scss":
/*!************************!*\
  !*** ./css/style.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

module.exports = window["React"];

/***/ }),

/***/ "react-dom":
/*!***************************!*\
  !*** external "ReactDOM" ***!
  \***************************/
/***/ ((module) => {

module.exports = window["ReactDOM"];

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ ((module) => {

module.exports = window["jQuery"];

/***/ }),

/***/ "@wordpress/api-fetch":
/*!**********************************!*\
  !*** external ["wp","apiFetch"] ***!
  \**********************************/
/***/ ((module) => {

module.exports = window["wp"]["apiFetch"];

/***/ }),

/***/ "@wordpress/element":
/*!*********************************!*\
  !*** external ["wp","element"] ***!
  \*********************************/
/***/ ((module) => {

module.exports = window["wp"]["element"];

/***/ }),

/***/ "./node_modules/@glidejs/glide/dist/glide.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@glidejs/glide/dist/glide.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Glide)
/* harmony export */ });
/*!
 * Glide.js v3.6.0
 * (c) 2013-2022 Jędrzej Chałubek (https://github.com/jedrzejchalubek/)
 * Released under the MIT License.
 */

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }

      return desc.value;
    };
  }

  return _get.apply(this, arguments);
}

var defaults = {
  /**
   * Type of the movement.
   *
   * Available types:
   * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.
   * `carousel` - Changes slides without starting over when it reaches the first or last slide.
   *
   * @type {String}
   */
  type: 'slider',

  /**
   * Start at specific slide number defined with zero-based index.
   *
   * @type {Number}
   */
  startAt: 0,

  /**
   * A number of slides visible on the single viewport.
   *
   * @type {Number}
   */
  perView: 1,

  /**
   * Focus currently active slide at a specified position in the track.
   *
   * Available inputs:
   * `center` - Current slide will be always focused at the center of a track.
   * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.
   *
   * @type {String|Number}
   */
  focusAt: 0,

  /**
   * A size of the gap added between slides.
   *
   * @type {Number}
   */
  gap: 10,

  /**
   * Change slides after a specified interval. Use `false` for turning off autoplay.
   *
   * @type {Number|Boolean}
   */
  autoplay: false,

  /**
   * Stop autoplay on mouseover event.
   *
   * @type {Boolean}
   */
  hoverpause: true,

  /**
   * Allow for changing slides with left and right keyboard arrows.
   *
   * @type {Boolean}
   */
  keyboard: true,

  /**
   * Stop running `perView` number of slides from the end. Use this
   * option if you don't want to have an empty space after
   * a slider. Works only with `slider` type and a
   * non-centered `focusAt` setting.
   *
   * @type {Boolean}
   */
  bound: false,

  /**
   * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.
   *
   * @type {Number|Boolean}
   */
  swipeThreshold: 80,

  /**
   * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.
   *
   * @type {Number|Boolean}
   */
  dragThreshold: 120,

  /**
   * A number of slides moved on single swipe.
   *
   * Available types:
   * `` - Moves slider by one slide per swipe
   * `|` - Moves slider between views per swipe (number of slides defined in `perView` options)
   *
   * @type {String}
   */
  perSwipe: '',

  /**
   * Moving distance ratio of the slides on a swiping and dragging.
   *
   * @type {Number}
   */
  touchRatio: 0.5,

  /**
   * Angle required to activate slides moving on swiping or dragging.
   *
   * @type {Number}
   */
  touchAngle: 45,

  /**
   * Duration of the animation in milliseconds.
   *
   * @type {Number}
   */
  animationDuration: 400,

  /**
   * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.
   *
   * @type {Boolean}
   */
  rewind: true,

  /**
   * Duration of the rewinding animation of the `slider` type in milliseconds.
   *
   * @type {Number}
   */
  rewindDuration: 800,

  /**
   * Easing function for the animation.
   *
   * @type {String}
   */
  animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',

  /**
   * Wait for the animation to finish until the next user input can be processed
   *
   * @type {boolean}
   */
  waitForTransition: true,

  /**
   * Throttle costly events at most once per every wait milliseconds.
   *
   * @type {Number}
   */
  throttle: 10,

  /**
   * Moving direction mode.
   *
   * Available inputs:
   * - 'ltr' - left to right movement,
   * - 'rtl' - right to left movement.
   *
   * @type {String}
   */
  direction: 'ltr',

  /**
   * The distance value of the next and previous viewports which
   * have to peek in the current view. Accepts number and
   * pixels as a string. Left and right peeking can be
   * set up separately with a directions object.
   *
   * For example:
   * `100` - Peek 100px on the both sides.
   * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.
   *
   * @type {Number|String|Object}
   */
  peek: 0,

  /**
   * Defines how many clones of current viewport will be generated.
   *
   * @type {Number}
   */
  cloningRatio: 1,

  /**
   * Collection of options applied at specified media breakpoints.
   * For example: display two slides per view under 800px.
   * `{
   *   '800px': {
   *     perView: 2
   *   }
   * }`
   */
  breakpoints: {},

  /**
   * Collection of internally used HTML classes.
   *
   * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object
   * @type {Object}
   */
  classes: {
    swipeable: 'glide--swipeable',
    dragging: 'glide--dragging',
    direction: {
      ltr: 'glide--ltr',
      rtl: 'glide--rtl'
    },
    type: {
      slider: 'glide--slider',
      carousel: 'glide--carousel'
    },
    slide: {
      clone: 'glide__slide--clone',
      active: 'glide__slide--active'
    },
    arrow: {
      disabled: 'glide__arrow--disabled'
    },
    nav: {
      active: 'glide__bullet--active'
    }
  }
};

/**
 * Outputs warning message to the bowser console.
 *
 * @param  {String} msg
 * @return {Void}
 */
function warn(msg) {
  console.error("[Glide warn]: ".concat(msg));
}

/**
 * Converts value entered as number
 * or string to integer value.
 *
 * @param {String} value
 * @returns {Number}
 */
function toInt(value) {
  return parseInt(value);
}
/**
 * Converts value entered as number
 * or string to flat value.
 *
 * @param {String} value
 * @returns {Number}
 */

function toFloat(value) {
  return parseFloat(value);
}
/**
 * Indicates whether the specified value is a string.
 *
 * @param  {*}   value
 * @return {Boolean}
 */

function isString(value) {
  return typeof value === 'string';
}
/**
 * Indicates whether the specified value is an object.
 *
 * @param  {*} value
 * @return {Boolean}
 *
 * @see https://github.com/jashkenas/underscore
 */

function isObject(value) {
  var type = _typeof(value);

  return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators
}
/**
 * Indicates whether the specified value is a function.
 *
 * @param  {*} value
 * @return {Boolean}
 */

function isFunction(value) {
  return typeof value === 'function';
}
/**
 * Indicates whether the specified value is undefined.
 *
 * @param  {*} value
 * @return {Boolean}
 */

function isUndefined(value) {
  return typeof value === 'undefined';
}
/**
 * Indicates whether the specified value is an array.
 *
 * @param  {*} value
 * @return {Boolean}
 */

function isArray(value) {
  return value.constructor === Array;
}

/**
 * Creates and initializes specified collection of extensions.
 * Each extension receives access to instance of glide and rest of components.
 *
 * @param {Object} glide
 * @param {Object} extensions
 *
 * @returns {Object}
 */

function mount(glide, extensions, events) {
  var components = {};

  for (var name in extensions) {
    if (isFunction(extensions[name])) {
      components[name] = extensions[name](glide, components, events);
    } else {
      warn('Extension must be a function');
    }
  }

  for (var _name in components) {
    if (isFunction(components[_name].mount)) {
      components[_name].mount();
    }
  }

  return components;
}

/**
 * Defines getter and setter property on the specified object.
 *
 * @param  {Object} obj         Object where property has to be defined.
 * @param  {String} prop        Name of the defined property.
 * @param  {Object} definition  Get and set definitions for the property.
 * @return {Void}
 */
function define(obj, prop, definition) {
  Object.defineProperty(obj, prop, definition);
}
/**
 * Sorts aphabetically object keys.
 *
 * @param  {Object} obj
 * @return {Object}
 */

function sortKeys(obj) {
  return Object.keys(obj).sort().reduce(function (r, k) {
    r[k] = obj[k];
    return r[k], r;
  }, {});
}
/**
 * Merges passed settings object with default options.
 *
 * @param  {Object} defaults
 * @param  {Object} settings
 * @return {Object}
 */

function mergeOptions(defaults, settings) {
  var options = Object.assign({}, defaults, settings); // `Object.assign` do not deeply merge objects, so we
  // have to do it manually for every nested object
  // in options. Although it does not look smart,
  // it's smaller and faster than some fancy
  // merging deep-merge algorithm script.

  if (settings.hasOwnProperty('classes')) {
    options.classes = Object.assign({}, defaults.classes, settings.classes);

    if (settings.classes.hasOwnProperty('direction')) {
      options.classes.direction = Object.assign({}, defaults.classes.direction, settings.classes.direction);
    }

    if (settings.classes.hasOwnProperty('type')) {
      options.classes.type = Object.assign({}, defaults.classes.type, settings.classes.type);
    }

    if (settings.classes.hasOwnProperty('slide')) {
      options.classes.slide = Object.assign({}, defaults.classes.slide, settings.classes.slide);
    }

    if (settings.classes.hasOwnProperty('arrow')) {
      options.classes.arrow = Object.assign({}, defaults.classes.arrow, settings.classes.arrow);
    }

    if (settings.classes.hasOwnProperty('nav')) {
      options.classes.nav = Object.assign({}, defaults.classes.nav, settings.classes.nav);
    }
  }

  if (settings.hasOwnProperty('breakpoints')) {
    options.breakpoints = Object.assign({}, defaults.breakpoints, settings.breakpoints);
  }

  return options;
}

var EventsBus = /*#__PURE__*/function () {
  /**
   * Construct a EventBus instance.
   *
   * @param {Object} events
   */
  function EventsBus() {
    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EventsBus);

    this.events = events;
    this.hop = events.hasOwnProperty;
  }
  /**
   * Adds listener to the specifed event.
   *
   * @param {String|Array} event
   * @param {Function} handler
   */


  _createClass(EventsBus, [{
    key: "on",
    value: function on(event, handler) {
      if (isArray(event)) {
        for (var i = 0; i < event.length; i++) {
          this.on(event[i], handler);
        }

        return;
      } // Create the event's object if not yet created


      if (!this.hop.call(this.events, event)) {
        this.events[event] = [];
      } // Add the handler to queue


      var index = this.events[event].push(handler) - 1; // Provide handle back for removal of event

      return {
        remove: function remove() {
          delete this.events[event][index];
        }
      };
    }
    /**
     * Runs registered handlers for specified event.
     *
     * @param {String|Array} event
     * @param {Object=} context
     */

  }, {
    key: "emit",
    value: function emit(event, context) {
      if (isArray(event)) {
        for (var i = 0; i < event.length; i++) {
          this.emit(event[i], context);
        }

        return;
      } // If the event doesn't exist, or there's no handlers in queue, just leave


      if (!this.hop.call(this.events, event)) {
        return;
      } // Cycle through events queue, fire!


      this.events[event].forEach(function (item) {
        item(context || {});
      });
    }
  }]);

  return EventsBus;
}();

var Glide$1 = /*#__PURE__*/function () {
  /**
   * Construct glide.
   *
   * @param  {String} selector
   * @param  {Object} options
   */
  function Glide(selector) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Glide);

    this._c = {};
    this._t = [];
    this._e = new EventsBus();
    this.disabled = false;
    this.selector = selector;
    this.settings = mergeOptions(defaults, options);
    this.index = this.settings.startAt;
  }
  /**
   * Initializes glide.
   *
   * @param {Object} extensions Collection of extensions to initialize.
   * @return {Glide}
   */


  _createClass(Glide, [{
    key: "mount",
    value: function mount$1() {
      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._e.emit('mount.before');

      if (isObject(extensions)) {
        this._c = mount(this, extensions, this._e);
      } else {
        warn('You need to provide a object on `mount()`');
      }

      this._e.emit('mount.after');

      return this;
    }
    /**
     * Collects an instance `translate` transformers.
     *
     * @param  {Array} transformers Collection of transformers.
     * @return {Void}
     */

  }, {
    key: "mutate",
    value: function mutate() {
      var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (isArray(transformers)) {
        this._t = transformers;
      } else {
        warn('You need to provide a array on `mutate()`');
      }

      return this;
    }
    /**
     * Updates glide with specified settings.
     *
     * @param {Object} settings
     * @return {Glide}
     */

  }, {
    key: "update",
    value: function update() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.settings = mergeOptions(this.settings, settings);

      if (settings.hasOwnProperty('startAt')) {
        this.index = settings.startAt;
      }

      this._e.emit('update');

      return this;
    }
    /**
     * Change slide with specified pattern. A pattern must be in the special format:
     * `>` - Move one forward
     * `<` - Move one backward
     * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)
     * `>>` - Rewinds to end (last slide)
     * `<<` - Rewinds to start (first slide)
     * `|>` - Move one viewport forward
     * `|<` - Move one viewport backward
     *
     * @param {String} pattern
     * @return {Glide}
     */

  }, {
    key: "go",
    value: function go(pattern) {
      this._c.Run.make(pattern);

      return this;
    }
    /**
     * Move track by specified distance.
     *
     * @param {String} distance
     * @return {Glide}
     */

  }, {
    key: "move",
    value: function move(distance) {
      this._c.Transition.disable();

      this._c.Move.make(distance);

      return this;
    }
    /**
     * Destroy instance and revert all changes done by this._c.
     *
     * @return {Glide}
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._e.emit('destroy');

      return this;
    }
    /**
     * Start instance autoplaying.
     *
     * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings
     * @return {Glide}
     */

  }, {
    key: "play",
    value: function play() {
      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (interval) {
        this.settings.autoplay = interval;
      }

      this._e.emit('play');

      return this;
    }
    /**
     * Stop instance autoplaying.
     *
     * @return {Glide}
     */

  }, {
    key: "pause",
    value: function pause() {
      this._e.emit('pause');

      return this;
    }
    /**
     * Sets glide into a idle status.
     *
     * @return {Glide}
     */

  }, {
    key: "disable",
    value: function disable() {
      this.disabled = true;
      return this;
    }
    /**
     * Sets glide into a active status.
     *
     * @return {Glide}
     */

  }, {
    key: "enable",
    value: function enable() {
      this.disabled = false;
      return this;
    }
    /**
     * Adds cuutom event listener with handler.
     *
     * @param  {String|Array} event
     * @param  {Function} handler
     * @return {Glide}
     */

  }, {
    key: "on",
    value: function on(event, handler) {
      this._e.on(event, handler);

      return this;
    }
    /**
     * Checks if glide is a precised type.
     *
     * @param  {String} name
     * @return {Boolean}
     */

  }, {
    key: "isType",
    value: function isType(name) {
      return this.settings.type === name;
    }
    /**
     * Gets value of the core options.
     *
     * @return {Object}
     */

  }, {
    key: "settings",
    get: function get() {
      return this._o;
    }
    /**
     * Sets value of the core options.
     *
     * @param  {Object} o
     * @return {Void}
     */
    ,
    set: function set(o) {
      if (isObject(o)) {
        this._o = o;
      } else {
        warn('Options must be an `object` instance.');
      }
    }
    /**
     * Gets current index of the slider.
     *
     * @return {Object}
     */

  }, {
    key: "index",
    get: function get() {
      return this._i;
    }
    /**
     * Sets current index a slider.
     *
     * @return {Object}
     */
    ,
    set: function set(i) {
      this._i = toInt(i);
    }
    /**
     * Gets type name of the slider.
     *
     * @return {String}
     */

  }, {
    key: "type",
    get: function get() {
      return this.settings.type;
    }
    /**
     * Gets value of the idle status.
     *
     * @return {Boolean}
     */

  }, {
    key: "disabled",
    get: function get() {
      return this._d;
    }
    /**
     * Sets value of the idle status.
     *
     * @return {Boolean}
     */
    ,
    set: function set(status) {
      this._d = !!status;
    }
  }]);

  return Glide;
}();

function Run (Glide, Components, Events) {
  var Run = {
    /**
     * Initializes autorunning of the glide.
     *
     * @return {Void}
     */
    mount: function mount() {
      this._o = false;
    },

    /**
     * Makes glides running based on the passed moving schema.
     *
     * @param {String} move
     */
    make: function make(move) {
      var _this = this;

      if (!Glide.disabled) {
        !Glide.settings.waitForTransition || Glide.disable();
        this.move = move;
        Events.emit('run.before', this.move);
        this.calculate();
        Events.emit('run', this.move);
        Components.Transition.after(function () {
          if (_this.isStart()) {
            Events.emit('run.start', _this.move);
          }

          if (_this.isEnd()) {
            Events.emit('run.end', _this.move);
          }

          if (_this.isOffset()) {
            _this._o = false;
            Events.emit('run.offset', _this.move);
          }

          Events.emit('run.after', _this.move);
          Glide.enable();
        });
      }
    },

    /**
     * Calculates current index based on defined move.
     *
     * @return {Number|Undefined}
     */
    calculate: function calculate() {
      var move = this.move,
          length = this.length;
      var steps = move.steps,
          direction = move.direction; // By default assume that size of view is equal to one slide

      var viewSize = 1; // While direction is `=` we want jump to
      // a specified index described in steps.

      if (direction === '=') {
        // Check if bound is true, 
        // as we want to avoid whitespaces.
        if (Glide.settings.bound && toInt(steps) > length) {
          Glide.index = length;
          return;
        }

        Glide.index = steps;
        return;
      } // When pattern is equal to `>>` we want
      // fast forward to the last slide.


      if (direction === '>' && steps === '>') {
        Glide.index = length;
        return;
      } // When pattern is equal to `<<` we want
      // fast forward to the first slide.


      if (direction === '<' && steps === '<') {
        Glide.index = 0;
        return;
      } // pagination movement


      if (direction === '|') {
        viewSize = Glide.settings.perView || 1;
      } // we are moving forward


      if (direction === '>' || direction === '|' && steps === '>') {
        var index = calculateForwardIndex(viewSize);

        if (index > length) {
          this._o = true;
        }

        Glide.index = normalizeForwardIndex(index, viewSize);
        return;
      } // we are moving backward


      if (direction === '<' || direction === '|' && steps === '<') {
        var _index = calculateBackwardIndex(viewSize);

        if (_index < 0) {
          this._o = true;
        }

        Glide.index = normalizeBackwardIndex(_index, viewSize);
        return;
      }

      warn("Invalid direction pattern [".concat(direction).concat(steps, "] has been used"));
    },

    /**
     * Checks if we are on the first slide.
     *
     * @return {Boolean}
     */
    isStart: function isStart() {
      return Glide.index <= 0;
    },

    /**
     * Checks if we are on the last slide.
     *
     * @return {Boolean}
     */
    isEnd: function isEnd() {
      return Glide.index >= this.length;
    },

    /**
     * Checks if we are making a offset run.
     *
     * @param {String} direction
     * @return {Boolean}
     */
    isOffset: function isOffset() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (!direction) {
        return this._o;
      }

      if (!this._o) {
        return false;
      } // did we view to the right?


      if (direction === '|>') {
        return this.move.direction === '|' && this.move.steps === '>';
      } // did we view to the left?


      if (direction === '|<') {
        return this.move.direction === '|' && this.move.steps === '<';
      }

      return this.move.direction === direction;
    },

    /**
     * Checks if bound mode is active
     *
     * @return {Boolean}
     */
    isBound: function isBound() {
      return Glide.isType('slider') && Glide.settings.focusAt !== 'center' && Glide.settings.bound;
    }
  };
  /**
   * Returns index value to move forward/to the right
   *
   * @param viewSize
   * @returns {Number}
   */

  function calculateForwardIndex(viewSize) {
    var index = Glide.index;

    if (Glide.isType('carousel')) {
      return index + viewSize;
    }

    return index + (viewSize - index % viewSize);
  }
  /**
   * Normalizes the given forward index based on glide settings, preventing it to exceed certain boundaries
   *
   * @param index
   * @param length
   * @param viewSize
   * @returns {Number}
   */


  function normalizeForwardIndex(index, viewSize) {
    var length = Run.length;

    if (index <= length) {
      return index;
    }

    if (Glide.isType('carousel')) {
      return index - (length + 1);
    }

    if (Glide.settings.rewind) {
      // bound does funny things with the length, therefor we have to be certain
      // that we are on the last possible index value given by bound
      if (Run.isBound() && !Run.isEnd()) {
        return length;
      }

      return 0;
    }

    if (Run.isBound()) {
      return length;
    }

    return Math.floor(length / viewSize) * viewSize;
  }
  /**
   * Calculates index value to move backward/to the left
   *
   * @param viewSize
   * @returns {Number}
   */


  function calculateBackwardIndex(viewSize) {
    var index = Glide.index;

    if (Glide.isType('carousel')) {
      return index - viewSize;
    } // ensure our back navigation results in the same index as a forward navigation
    // to experience a homogeneous paging


    var view = Math.ceil(index / viewSize);
    return (view - 1) * viewSize;
  }
  /**
   * Normalizes the given backward index based on glide settings, preventing it to exceed certain boundaries
   *
   * @param index
   * @param length
   * @param viewSize
   * @returns {*}
   */


  function normalizeBackwardIndex(index, viewSize) {
    var length = Run.length;

    if (index >= 0) {
      return index;
    }

    if (Glide.isType('carousel')) {
      return index + (length + 1);
    }

    if (Glide.settings.rewind) {
      // bound does funny things with the length, therefor we have to be certain
      // that we are on first possible index value before we to rewind to the length given by bound
      if (Run.isBound() && Run.isStart()) {
        return length;
      }

      return Math.floor(length / viewSize) * viewSize;
    }

    return 0;
  }

  define(Run, 'move', {
    /**
     * Gets value of the move schema.
     *
     * @returns {Object}
     */
    get: function get() {
      return this._m;
    },

    /**
     * Sets value of the move schema.
     *
     * @returns {Object}
     */
    set: function set(value) {
      var step = value.substr(1);
      this._m = {
        direction: value.substr(0, 1),
        steps: step ? toInt(step) ? toInt(step) : step : 0
      };
    }
  });
  define(Run, 'length', {
    /**
     * Gets value of the running distance based
     * on zero-indexing number of slides.
     *
     * @return {Number}
     */
    get: function get() {
      var settings = Glide.settings;
      var length = Components.Html.slides.length; // If the `bound` option is active, a maximum running distance should be
      // reduced by `perView` and `focusAt` settings. Running distance
      // should end before creating an empty space after instance.

      if (this.isBound()) {
        return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);
      }

      return length - 1;
    }
  });
  define(Run, 'offset', {
    /**
     * Gets status of the offsetting flag.
     *
     * @return {Boolean}
     */
    get: function get() {
      return this._o;
    }
  });
  return Run;
}

/**
 * Returns a current time.
 *
 * @return {Number}
 */
function now() {
  return new Date().getTime();
}

/**
 * Returns a function, that, when invoked, will only be triggered
 * at most once during a given window of time.
 *
 * @param {Function} func
 * @param {Number} wait
 * @param {Object=} options
 * @return {Function}
 *
 * @see https://github.com/jashkenas/underscore
 */

function throttle(func, wait, options) {
  var timeout, context, args, result;
  var previous = 0;
  if (!options) options = {};

  var later = function later() {
    previous = options.leading === false ? 0 : now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };

  var throttled = function throttled() {
    var at = now();
    if (!previous && options.leading === false) previous = at;
    var remaining = wait - (at - previous);
    context = this;
    args = arguments;

    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }

      previous = at;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }

    return result;
  };

  throttled.cancel = function () {
    clearTimeout(timeout);
    previous = 0;
    timeout = context = args = null;
  };

  return throttled;
}

var MARGIN_TYPE = {
  ltr: ['marginLeft', 'marginRight'],
  rtl: ['marginRight', 'marginLeft']
};
function Gaps (Glide, Components, Events) {
  var Gaps = {
    /**
     * Applies gaps between slides. First and last
     * slides do not receive it's edge margins.
     *
     * @param {HTMLCollection} slides
     * @return {Void}
     */
    apply: function apply(slides) {
      for (var i = 0, len = slides.length; i < len; i++) {
        var style = slides[i].style;
        var direction = Components.Direction.value;

        if (i !== 0) {
          style[MARGIN_TYPE[direction][0]] = "".concat(this.value / 2, "px");
        } else {
          style[MARGIN_TYPE[direction][0]] = '';
        }

        if (i !== slides.length - 1) {
          style[MARGIN_TYPE[direction][1]] = "".concat(this.value / 2, "px");
        } else {
          style[MARGIN_TYPE[direction][1]] = '';
        }
      }
    },

    /**
     * Removes gaps from the slides.
     *
     * @param {HTMLCollection} slides
     * @returns {Void}
    */
    remove: function remove(slides) {
      for (var i = 0, len = slides.length; i < len; i++) {
        var style = slides[i].style;
        style.marginLeft = '';
        style.marginRight = '';
      }
    }
  };
  define(Gaps, 'value', {
    /**
     * Gets value of the gap.
     *
     * @returns {Number}
     */
    get: function get() {
      return toInt(Glide.settings.gap);
    }
  });
  define(Gaps, 'grow', {
    /**
     * Gets additional dimensions value caused by gaps.
     * Used to increase width of the slides wrapper.
     *
     * @returns {Number}
     */
    get: function get() {
      return Gaps.value * Components.Sizes.length;
    }
  });
  define(Gaps, 'reductor', {
    /**
     * Gets reduction value caused by gaps.
     * Used to subtract width of the slides.
     *
     * @returns {Number}
     */
    get: function get() {
      var perView = Glide.settings.perView;
      return Gaps.value * (perView - 1) / perView;
    }
  });
  /**
   * Apply calculated gaps:
   * - after building, so slides (including clones) will receive proper margins
   * - on updating via API, to recalculate gaps with new options
   */

  Events.on(['build.after', 'update'], throttle(function () {
    Gaps.apply(Components.Html.wrapper.children);
  }, 30));
  /**
   * Remove gaps:
   * - on destroying to bring markup to its inital state
   */

  Events.on('destroy', function () {
    Gaps.remove(Components.Html.wrapper.children);
  });
  return Gaps;
}

/**
 * Finds siblings nodes of the passed node.
 *
 * @param  {Element} node
 * @return {Array}
 */
function siblings(node) {
  if (node && node.parentNode) {
    var n = node.parentNode.firstChild;
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== node) {
        matched.push(n);
      }
    }

    return matched;
  }

  return [];
}
/**
 * Checks if passed node exist and is a valid element.
 *
 * @param  {Element} node
 * @return {Boolean}
 */

function exist(node) {
  if (node && node instanceof window.HTMLElement) {
    return true;
  }

  return false;
}
/**
 * Coerces a NodeList to an Array.
 *
 * @param  {NodeList} nodeList
 * @return {Array}
 */

function toArray(nodeList) {
  return Array.prototype.slice.call(nodeList);
}

var TRACK_SELECTOR = '[data-glide-el="track"]';
function Html (Glide, Components, Events) {
  var Html = {
    /**
     * Setup slider HTML nodes.
     *
     * @param {Glide} glide
     */
    mount: function mount() {
      this.root = Glide.selector;
      this.track = this.root.querySelector(TRACK_SELECTOR);
      this.collectSlides();
    },

    /**
     * Collect slides
     */
    collectSlides: function collectSlides() {
      this.slides = toArray(this.wrapper.children).filter(function (slide) {
        return !slide.classList.contains(Glide.settings.classes.slide.clone);
      });
    }
  };
  define(Html, 'root', {
    /**
     * Gets node of the glide main element.
     *
     * @return {Object}
     */
    get: function get() {
      return Html._r;
    },

    /**
     * Sets node of the glide main element.
     *
     * @return {Object}
     */
    set: function set(r) {
      if (isString(r)) {
        r = document.querySelector(r);
      }

      if (exist(r)) {
        Html._r = r;
      } else {
        warn('Root element must be a existing Html node');
      }
    }
  });
  define(Html, 'track', {
    /**
     * Gets node of the glide track with slides.
     *
     * @return {Object}
     */
    get: function get() {
      return Html._t;
    },

    /**
     * Sets node of the glide track with slides.
     *
     * @return {Object}
     */
    set: function set(t) {
      if (exist(t)) {
        Html._t = t;
      } else {
        warn("Could not find track element. Please use ".concat(TRACK_SELECTOR, " attribute."));
      }
    }
  });
  define(Html, 'wrapper', {
    /**
     * Gets node of the slides wrapper.
     *
     * @return {Object}
     */
    get: function get() {
      return Html.track.children[0];
    }
  });
  /**
   * Add/remove/reorder dynamic slides
   */

  Events.on('update', function () {
    Html.collectSlides();
  });
  return Html;
}

function Peek (Glide, Components, Events) {
  var Peek = {
    /**
     * Setups how much to peek based on settings.
     *
     * @return {Void}
     */
    mount: function mount() {
      this.value = Glide.settings.peek;
    }
  };
  define(Peek, 'value', {
    /**
     * Gets value of the peek.
     *
     * @returns {Number|Object}
     */
    get: function get() {
      return Peek._v;
    },

    /**
     * Sets value of the peek.
     *
     * @param {Number|Object} value
     * @return {Void}
     */
    set: function set(value) {
      if (isObject(value)) {
        value.before = toInt(value.before);
        value.after = toInt(value.after);
      } else {
        value = toInt(value);
      }

      Peek._v = value;
    }
  });
  define(Peek, 'reductor', {
    /**
     * Gets reduction value caused by peek.
     *
     * @returns {Number}
     */
    get: function get() {
      var value = Peek.value;
      var perView = Glide.settings.perView;

      if (isObject(value)) {
        return value.before / perView + value.after / perView;
      }

      return value * 2 / perView;
    }
  });
  /**
   * Recalculate peeking sizes on:
   * - when resizing window to update to proper percents
   */

  Events.on(['resize', 'update'], function () {
    Peek.mount();
  });
  return Peek;
}

function Move (Glide, Components, Events) {
  var Move = {
    /**
     * Constructs move component.
     *
     * @returns {Void}
     */
    mount: function mount() {
      this._o = 0;
    },

    /**
     * Calculates a movement value based on passed offset and currently active index.
     *
     * @param  {Number} offset
     * @return {Void}
     */
    make: function make() {
      var _this = this;

      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.offset = offset;
      Events.emit('move', {
        movement: this.value
      });
      Components.Transition.after(function () {
        Events.emit('move.after', {
          movement: _this.value
        });
      });
    }
  };
  define(Move, 'offset', {
    /**
     * Gets an offset value used to modify current translate.
     *
     * @return {Object}
     */
    get: function get() {
      return Move._o;
    },

    /**
     * Sets an offset value used to modify current translate.
     *
     * @return {Object}
     */
    set: function set(value) {
      Move._o = !isUndefined(value) ? toInt(value) : 0;
    }
  });
  define(Move, 'translate', {
    /**
     * Gets a raw movement value.
     *
     * @return {Number}
     */
    get: function get() {
      return Components.Sizes.slideWidth * Glide.index;
    }
  });
  define(Move, 'value', {
    /**
     * Gets an actual movement value corrected by offset.
     *
     * @return {Number}
     */
    get: function get() {
      var offset = this.offset;
      var translate = this.translate;

      if (Components.Direction.is('rtl')) {
        return translate + offset;
      }

      return translate - offset;
    }
  });
  /**
   * Make movement to proper slide on:
   * - before build, so glide will start at `startAt` index
   * - on each standard run to move to newly calculated index
   */

  Events.on(['build.before', 'run'], function () {
    Move.make();
  });
  return Move;
}

function Sizes (Glide, Components, Events) {
  var Sizes = {
    /**
     * Setups dimensions of slides.
     *
     * @return {Void}
     */
    setupSlides: function setupSlides() {
      var width = "".concat(this.slideWidth, "px");
      var slides = Components.Html.slides;

      for (var i = 0; i < slides.length; i++) {
        slides[i].style.width = width;
      }
    },

    /**
     * Setups dimensions of slides wrapper.
     *
     * @return {Void}
     */
    setupWrapper: function setupWrapper() {
      Components.Html.wrapper.style.width = "".concat(this.wrapperSize, "px");
    },

    /**
     * Removes applied styles from HTML elements.
     *
     * @returns {Void}
     */
    remove: function remove() {
      var slides = Components.Html.slides;

      for (var i = 0; i < slides.length; i++) {
        slides[i].style.width = '';
      }

      Components.Html.wrapper.style.width = '';
    }
  };
  define(Sizes, 'length', {
    /**
     * Gets count number of the slides.
     *
     * @return {Number}
     */
    get: function get() {
      return Components.Html.slides.length;
    }
  });
  define(Sizes, 'width', {
    /**
     * Gets width value of the slider (visible area).
     *
     * @return {Number}
     */
    get: function get() {
      return Components.Html.track.offsetWidth;
    }
  });
  define(Sizes, 'wrapperSize', {
    /**
     * Gets size of the slides wrapper.
     *
     * @return {Number}
     */
    get: function get() {
      return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;
    }
  });
  define(Sizes, 'slideWidth', {
    /**
     * Gets width value of a single slide.
     *
     * @return {Number}
     */
    get: function get() {
      return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;
    }
  });
  /**
   * Apply calculated glide's dimensions:
   * - before building, so other dimensions (e.g. translate) will be calculated propertly
   * - when resizing window to recalculate sildes dimensions
   * - on updating via API, to calculate dimensions based on new options
   */

  Events.on(['build.before', 'resize', 'update'], function () {
    Sizes.setupSlides();
    Sizes.setupWrapper();
  });
  /**
   * Remove calculated glide's dimensions:
   * - on destoting to bring markup to its inital state
   */

  Events.on('destroy', function () {
    Sizes.remove();
  });
  return Sizes;
}

function Build (Glide, Components, Events) {
  var Build = {
    /**
     * Init glide building. Adds classes, sets
     * dimensions and setups initial state.
     *
     * @return {Void}
     */
    mount: function mount() {
      Events.emit('build.before');
      this.typeClass();
      this.activeClass();
      Events.emit('build.after');
    },

    /**
     * Adds `type` class to the glide element.
     *
     * @return {Void}
     */
    typeClass: function typeClass() {
      Components.Html.root.classList.add(Glide.settings.classes.type[Glide.settings.type]);
    },

    /**
     * Sets active class to current slide.
     *
     * @return {Void}
     */
    activeClass: function activeClass() {
      var classes = Glide.settings.classes;
      var slide = Components.Html.slides[Glide.index];

      if (slide) {
        slide.classList.add(classes.slide.active);
        siblings(slide).forEach(function (sibling) {
          sibling.classList.remove(classes.slide.active);
        });
      }
    },

    /**
     * Removes HTML classes applied at building.
     *
     * @return {Void}
     */
    removeClasses: function removeClasses() {
      var _Glide$settings$class = Glide.settings.classes,
          type = _Glide$settings$class.type,
          slide = _Glide$settings$class.slide;
      Components.Html.root.classList.remove(type[Glide.settings.type]);
      Components.Html.slides.forEach(function (sibling) {
        sibling.classList.remove(slide.active);
      });
    }
  };
  /**
   * Clear building classes:
   * - on destroying to bring HTML to its initial state
   * - on updating to remove classes before remounting component
   */

  Events.on(['destroy', 'update'], function () {
    Build.removeClasses();
  });
  /**
   * Remount component:
   * - on resizing of the window to calculate new dimensions
   * - on updating settings via API
   */

  Events.on(['resize', 'update'], function () {
    Build.mount();
  });
  /**
   * Swap active class of current slide:
   * - after each move to the new index
   */

  Events.on('move.after', function () {
    Build.activeClass();
  });
  return Build;
}

function Clones (Glide, Components, Events) {
  var Clones = {
    /**
     * Create pattern map and collect slides to be cloned.
     */
    mount: function mount() {
      this.items = [];

      if (Glide.isType('carousel')) {
        this.items = this.collect();
      }
    },

    /**
     * Collect clones with pattern.
     *
     * @return {[]}
     */
    collect: function collect() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var slides = Components.Html.slides;
      var _Glide$settings = Glide.settings,
          perView = _Glide$settings.perView,
          classes = _Glide$settings.classes,
          cloningRatio = _Glide$settings.cloningRatio;

      if (slides.length !== 0) {
        var peekIncrementer = +!!Glide.settings.peek;
        var cloneCount = perView + peekIncrementer + Math.round(perView / 2);
        var append = slides.slice(0, cloneCount).reverse();
        var prepend = slides.slice(cloneCount * -1);

        for (var r = 0; r < Math.max(cloningRatio, Math.floor(perView / slides.length)); r++) {
          for (var i = 0; i < append.length; i++) {
            var clone = append[i].cloneNode(true);
            clone.classList.add(classes.slide.clone);
            items.push(clone);
          }

          for (var _i = 0; _i < prepend.length; _i++) {
            var _clone = prepend[_i].cloneNode(true);

            _clone.classList.add(classes.slide.clone);

            items.unshift(_clone);
          }
        }
      }

      return items;
    },

    /**
     * Append cloned slides with generated pattern.
     *
     * @return {Void}
     */
    append: function append() {
      var items = this.items;
      var _Components$Html = Components.Html,
          wrapper = _Components$Html.wrapper,
          slides = _Components$Html.slides;
      var half = Math.floor(items.length / 2);
      var prepend = items.slice(0, half).reverse();
      var append = items.slice(half * -1).reverse();
      var width = "".concat(Components.Sizes.slideWidth, "px");

      for (var i = 0; i < append.length; i++) {
        wrapper.appendChild(append[i]);
      }

      for (var _i2 = 0; _i2 < prepend.length; _i2++) {
        wrapper.insertBefore(prepend[_i2], slides[0]);
      }

      for (var _i3 = 0; _i3 < items.length; _i3++) {
        items[_i3].style.width = width;
      }
    },

    /**
     * Remove all cloned slides.
     *
     * @return {Void}
     */
    remove: function remove() {
      var items = this.items;

      for (var i = 0; i < items.length; i++) {
        Components.Html.wrapper.removeChild(items[i]);
      }
    }
  };
  define(Clones, 'grow', {
    /**
     * Gets additional dimensions value caused by clones.
     *
     * @return {Number}
     */
    get: function get() {
      return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;
    }
  });
  /**
   * Append additional slide's clones:
   * - while glide's type is `carousel`
   */

  Events.on('update', function () {
    Clones.remove();
    Clones.mount();
    Clones.append();
  });
  /**
   * Append additional slide's clones:
   * - while glide's type is `carousel`
   */

  Events.on('build.before', function () {
    if (Glide.isType('carousel')) {
      Clones.append();
    }
  });
  /**
   * Remove clones HTMLElements:
   * - on destroying, to bring HTML to its initial state
   */

  Events.on('destroy', function () {
    Clones.remove();
  });
  return Clones;
}

var EventsBinder = /*#__PURE__*/function () {
  /**
   * Construct a EventsBinder instance.
   */
  function EventsBinder() {
    var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EventsBinder);

    this.listeners = listeners;
  }
  /**
   * Adds events listeners to arrows HTML elements.
   *
   * @param  {String|Array} events
   * @param  {Element|Window|Document} el
   * @param  {Function} closure
   * @param  {Boolean|Object} capture
   * @return {Void}
   */


  _createClass(EventsBinder, [{
    key: "on",
    value: function on(events, el, closure) {
      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (isString(events)) {
        events = [events];
      }

      for (var i = 0; i < events.length; i++) {
        this.listeners[events[i]] = closure;
        el.addEventListener(events[i], this.listeners[events[i]], capture);
      }
    }
    /**
     * Removes event listeners from arrows HTML elements.
     *
     * @param  {String|Array} events
     * @param  {Element|Window|Document} el
     * @param  {Boolean|Object} capture
     * @return {Void}
     */

  }, {
    key: "off",
    value: function off(events, el) {
      var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (isString(events)) {
        events = [events];
      }

      for (var i = 0; i < events.length; i++) {
        el.removeEventListener(events[i], this.listeners[events[i]], capture);
      }
    }
    /**
     * Destroy collected listeners.
     *
     * @returns {Void}
     */

  }, {
    key: "destroy",
    value: function destroy() {
      delete this.listeners;
    }
  }]);

  return EventsBinder;
}();

function Resize (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var Resize = {
    /**
     * Initializes window bindings.
     */
    mount: function mount() {
      this.bind();
    },

    /**
     * Binds `rezsize` listener to the window.
     * It's a costly event, so we are debouncing it.
     *
     * @return {Void}
     */
    bind: function bind() {
      Binder.on('resize', window, throttle(function () {
        Events.emit('resize');
      }, Glide.settings.throttle));
    },

    /**
     * Unbinds listeners from the window.
     *
     * @return {Void}
     */
    unbind: function unbind() {
      Binder.off('resize', window);
    }
  };
  /**
   * Remove bindings from window:
   * - on destroying, to remove added EventListener
   */

  Events.on('destroy', function () {
    Resize.unbind();
    Binder.destroy();
  });
  return Resize;
}

var VALID_DIRECTIONS = ['ltr', 'rtl'];
var FLIPED_MOVEMENTS = {
  '>': '<',
  '<': '>',
  '=': '='
};
function Direction (Glide, Components, Events) {
  var Direction = {
    /**
     * Setups gap value based on settings.
     *
     * @return {Void}
     */
    mount: function mount() {
      this.value = Glide.settings.direction;
    },

    /**
     * Resolves pattern based on direction value
     *
     * @param {String} pattern
     * @returns {String}
     */
    resolve: function resolve(pattern) {
      var token = pattern.slice(0, 1);

      if (this.is('rtl')) {
        return pattern.split(token).join(FLIPED_MOVEMENTS[token]);
      }

      return pattern;
    },

    /**
     * Checks value of direction mode.
     *
     * @param {String} direction
     * @returns {Boolean}
     */
    is: function is(direction) {
      return this.value === direction;
    },

    /**
     * Applies direction class to the root HTML element.
     *
     * @return {Void}
     */
    addClass: function addClass() {
      Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);
    },

    /**
     * Removes direction class from the root HTML element.
     *
     * @return {Void}
     */
    removeClass: function removeClass() {
      Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);
    }
  };
  define(Direction, 'value', {
    /**
     * Gets value of the direction.
     *
     * @returns {Number}
     */
    get: function get() {
      return Direction._v;
    },

    /**
     * Sets value of the direction.
     *
     * @param {String} value
     * @return {Void}
     */
    set: function set(value) {
      if (VALID_DIRECTIONS.indexOf(value) > -1) {
        Direction._v = value;
      } else {
        warn('Direction value must be `ltr` or `rtl`');
      }
    }
  });
  /**
   * Clear direction class:
   * - on destroy to bring HTML to its initial state
   * - on update to remove class before reappling bellow
   */

  Events.on(['destroy', 'update'], function () {
    Direction.removeClass();
  });
  /**
   * Remount component:
   * - on update to reflect changes in direction value
   */

  Events.on('update', function () {
    Direction.mount();
  });
  /**
   * Apply direction class:
   * - before building to apply class for the first time
   * - on updating to reapply direction class that may changed
   */

  Events.on(['build.before', 'update'], function () {
    Direction.addClass();
  });
  return Direction;
}

/**
 * Reflects value of glide movement.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */
function Rtl (Glide, Components) {
  return {
    /**
     * Negates the passed translate if glide is in RTL option.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    modify: function modify(translate) {
      if (Components.Direction.is('rtl')) {
        return -translate;
      }

      return translate;
    }
  };
}

/**
 * Updates glide movement with a `gap` settings.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */
function Gap (Glide, Components) {
  return {
    /**
     * Modifies passed translate value with number in the `gap` settings.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    modify: function modify(translate) {
      var multiplier = Math.floor(translate / Components.Sizes.slideWidth);
      return translate + Components.Gaps.value * multiplier;
    }
  };
}

/**
 * Updates glide movement with width of additional clones width.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */
function Grow (Glide, Components) {
  return {
    /**
     * Adds to the passed translate width of the half of clones.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    modify: function modify(translate) {
      return translate + Components.Clones.grow / 2;
    }
  };
}

/**
 * Updates glide movement with a `peek` settings.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */

function Peeking (Glide, Components) {
  return {
    /**
     * Modifies passed translate value with a `peek` setting.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    modify: function modify(translate) {
      if (Glide.settings.focusAt >= 0) {
        var peek = Components.Peek.value;

        if (isObject(peek)) {
          return translate - peek.before;
        }

        return translate - peek;
      }

      return translate;
    }
  };
}

/**
 * Updates glide movement with a `focusAt` settings.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */
function Focusing (Glide, Components) {
  return {
    /**
     * Modifies passed translate value with index in the `focusAt` setting.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    modify: function modify(translate) {
      var gap = Components.Gaps.value;
      var width = Components.Sizes.width;
      var focusAt = Glide.settings.focusAt;
      var slideWidth = Components.Sizes.slideWidth;

      if (focusAt === 'center') {
        return translate - (width / 2 - slideWidth / 2);
      }

      return translate - slideWidth * focusAt - gap * focusAt;
    }
  };
}

/**
 * Applies diffrent transformers on translate value.
 *
 * @param  {Object} Glide
 * @param  {Object} Components
 * @return {Object}
 */

function mutator (Glide, Components, Events) {
  /**
   * Merge instance transformers with collection of default transformers.
   * It's important that the Rtl component be last on the list,
   * so it reflects all previous transformations.
   *
   * @type {Array}
   */
  var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);
  return {
    /**
     * Piplines translate value with registered transformers.
     *
     * @param  {Number} translate
     * @return {Number}
     */
    mutate: function mutate(translate) {
      for (var i = 0; i < TRANSFORMERS.length; i++) {
        var transformer = TRANSFORMERS[i];

        if (isFunction(transformer) && isFunction(transformer().modify)) {
          translate = transformer(Glide, Components, Events).modify(translate);
        } else {
          warn('Transformer should be a function that returns an object with `modify()` method');
        }
      }

      return translate;
    }
  };
}

function Translate (Glide, Components, Events) {
  var Translate = {
    /**
     * Sets value of translate on HTML element.
     *
     * @param {Number} value
     * @return {Void}
     */
    set: function set(value) {
      var transform = mutator(Glide, Components).mutate(value);
      var translate3d = "translate3d(".concat(-1 * transform, "px, 0px, 0px)");
      Components.Html.wrapper.style.mozTransform = translate3d; // needed for supported Firefox 10-15

      Components.Html.wrapper.style.webkitTransform = translate3d; // needed for supported Chrome 10-35, Safari 5.1-8, and Opera 15-22

      Components.Html.wrapper.style.transform = translate3d;
    },

    /**
     * Removes value of translate from HTML element.
     *
     * @return {Void}
     */
    remove: function remove() {
      Components.Html.wrapper.style.transform = '';
    },

    /**
     * @return {number}
     */
    getStartIndex: function getStartIndex() {
      var length = Components.Sizes.length;
      var index = Glide.index;
      var perView = Glide.settings.perView;

      if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {
        return length + (index - perView);
      } // "modulo length" converts an index that equals length to zero


      return (index + perView) % length;
    },

    /**
     * @return {number}
     */
    getTravelDistance: function getTravelDistance() {
      var travelDistance = Components.Sizes.slideWidth * Glide.settings.perView;

      if (Components.Run.isOffset('>') || Components.Run.isOffset('|>')) {
        // reverse travel distance so that we don't have to change subtract operations
        return travelDistance * -1;
      }

      return travelDistance;
    }
  };
  /**
   * Set new translate value:
   * - on move to reflect index change
   * - on updating via API to reflect possible changes in options
   */

  Events.on('move', function (context) {
    if (!Glide.isType('carousel') || !Components.Run.isOffset()) {
      return Translate.set(context.movement);
    }

    Components.Transition.after(function () {
      Events.emit('translate.jump');
      Translate.set(Components.Sizes.slideWidth * Glide.index);
    });
    var startWidth = Components.Sizes.slideWidth * Components.Translate.getStartIndex();
    return Translate.set(startWidth - Components.Translate.getTravelDistance());
  });
  /**
   * Remove translate:
   * - on destroying to bring markup to its inital state
   */

  Events.on('destroy', function () {
    Translate.remove();
  });
  return Translate;
}

function Transition (Glide, Components, Events) {
  /**
   * Holds inactivity status of transition.
   * When true transition is not applied.
   *
   * @type {Boolean}
   */
  var disabled = false;
  var Transition = {
    /**
     * Composes string of the CSS transition.
     *
     * @param {String} property
     * @return {String}
     */
    compose: function compose(property) {
      var settings = Glide.settings;

      if (!disabled) {
        return "".concat(property, " ").concat(this.duration, "ms ").concat(settings.animationTimingFunc);
      }

      return "".concat(property, " 0ms ").concat(settings.animationTimingFunc);
    },

    /**
     * Sets value of transition on HTML element.
     *
     * @param {String=} property
     * @return {Void}
     */
    set: function set() {
      var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';
      Components.Html.wrapper.style.transition = this.compose(property);
    },

    /**
     * Removes value of transition from HTML element.
     *
     * @return {Void}
     */
    remove: function remove() {
      Components.Html.wrapper.style.transition = '';
    },

    /**
     * Runs callback after animation.
     *
     * @param  {Function} callback
     * @return {Void}
     */
    after: function after(callback) {
      setTimeout(function () {
        callback();
      }, this.duration);
    },

    /**
     * Enable transition.
     *
     * @return {Void}
     */
    enable: function enable() {
      disabled = false;
      this.set();
    },

    /**
     * Disable transition.
     *
     * @return {Void}
     */
    disable: function disable() {
      disabled = true;
      this.set();
    }
  };
  define(Transition, 'duration', {
    /**
     * Gets duration of the transition based
     * on currently running animation type.
     *
     * @return {Number}
     */
    get: function get() {
      var settings = Glide.settings;

      if (Glide.isType('slider') && Components.Run.offset) {
        return settings.rewindDuration;
      }

      return settings.animationDuration;
    }
  });
  /**
   * Set transition `style` value:
   * - on each moving, because it may be cleared by offset move
   */

  Events.on('move', function () {
    Transition.set();
  });
  /**
   * Disable transition:
   * - before initial build to avoid transitioning from `0` to `startAt` index
   * - while resizing window and recalculating dimensions
   * - on jumping from offset transition at start and end edges in `carousel` type
   */

  Events.on(['build.before', 'resize', 'translate.jump'], function () {
    Transition.disable();
  });
  /**
   * Enable transition:
   * - on each running, because it may be disabled by offset move
   */

  Events.on('run', function () {
    Transition.enable();
  });
  /**
   * Remove transition:
   * - on destroying to bring markup to its inital state
   */

  Events.on('destroy', function () {
    Transition.remove();
  });
  return Transition;
}

/**
 * Test via a getter in the options object to see
 * if the passive property is accessed.
 *
 * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
 */
var supportsPassive = false;

try {
  var opts = Object.defineProperty({}, 'passive', {
    get: function get() {
      supportsPassive = true;
    }
  });
  window.addEventListener('testPassive', null, opts);
  window.removeEventListener('testPassive', null, opts);
} catch (e) {}

var supportsPassive$1 = supportsPassive;

var START_EVENTS = ['touchstart', 'mousedown'];
var MOVE_EVENTS = ['touchmove', 'mousemove'];
var END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];
var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];
function Swipe (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var swipeSin = 0;
  var swipeStartX = 0;
  var swipeStartY = 0;
  var disabled = false;
  var capture = supportsPassive$1 ? {
    passive: true
  } : false;
  var Swipe = {
    /**
     * Initializes swipe bindings.
     *
     * @return {Void}
     */
    mount: function mount() {
      this.bindSwipeStart();
    },

    /**
     * Handler for `swipestart` event. Calculates entry points of the user's tap.
     *
     * @param {Object} event
     * @return {Void}
     */
    start: function start(event) {
      if (!disabled && !Glide.disabled) {
        this.disable();
        var swipe = this.touches(event);
        swipeSin = null;
        swipeStartX = toInt(swipe.pageX);
        swipeStartY = toInt(swipe.pageY);
        this.bindSwipeMove();
        this.bindSwipeEnd();
        Events.emit('swipe.start');
      }
    },

    /**
     * Handler for `swipemove` event. Calculates user's tap angle and distance.
     *
     * @param {Object} event
     */
    move: function move(event) {
      if (!Glide.disabled) {
        var _Glide$settings = Glide.settings,
            touchAngle = _Glide$settings.touchAngle,
            touchRatio = _Glide$settings.touchRatio,
            classes = _Glide$settings.classes;
        var swipe = this.touches(event);
        var subExSx = toInt(swipe.pageX) - swipeStartX;
        var subEySy = toInt(swipe.pageY) - swipeStartY;
        var powEX = Math.abs(subExSx << 2);
        var powEY = Math.abs(subEySy << 2);
        var swipeHypotenuse = Math.sqrt(powEX + powEY);
        var swipeCathetus = Math.sqrt(powEY);
        swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);

        if (swipeSin * 180 / Math.PI < touchAngle) {
          event.stopPropagation();
          Components.Move.make(subExSx * toFloat(touchRatio));
          Components.Html.root.classList.add(classes.dragging);
          Events.emit('swipe.move');
        } else {
          return false;
        }
      }
    },

    /**
     * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.
     *
     * @param {Object} event
     * @return {Void}
     */
    end: function end(event) {
      if (!Glide.disabled) {
        var _Glide$settings2 = Glide.settings,
            perSwipe = _Glide$settings2.perSwipe,
            touchAngle = _Glide$settings2.touchAngle,
            classes = _Glide$settings2.classes;
        var swipe = this.touches(event);
        var threshold = this.threshold(event);
        var swipeDistance = swipe.pageX - swipeStartX;
        var swipeDeg = swipeSin * 180 / Math.PI;
        this.enable();

        if (swipeDistance > threshold && swipeDeg < touchAngle) {
          Components.Run.make(Components.Direction.resolve("".concat(perSwipe, "<")));
        } else if (swipeDistance < -threshold && swipeDeg < touchAngle) {
          Components.Run.make(Components.Direction.resolve("".concat(perSwipe, ">")));
        } else {
          // While swipe don't reach distance apply previous transform.
          Components.Move.make();
        }

        Components.Html.root.classList.remove(classes.dragging);
        this.unbindSwipeMove();
        this.unbindSwipeEnd();
        Events.emit('swipe.end');
      }
    },

    /**
     * Binds swipe's starting event.
     *
     * @return {Void}
     */
    bindSwipeStart: function bindSwipeStart() {
      var _this = this;

      var _Glide$settings3 = Glide.settings,
          swipeThreshold = _Glide$settings3.swipeThreshold,
          dragThreshold = _Glide$settings3.dragThreshold;

      if (swipeThreshold) {
        Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {
          _this.start(event);
        }, capture);
      }

      if (dragThreshold) {
        Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {
          _this.start(event);
        }, capture);
      }
    },

    /**
     * Unbinds swipe's starting event.
     *
     * @return {Void}
     */
    unbindSwipeStart: function unbindSwipeStart() {
      Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);
      Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);
    },

    /**
     * Binds swipe's moving event.
     *
     * @return {Void}
     */
    bindSwipeMove: function bindSwipeMove() {
      var _this2 = this;

      Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {
        _this2.move(event);
      }, Glide.settings.throttle), capture);
    },

    /**
     * Unbinds swipe's moving event.
     *
     * @return {Void}
     */
    unbindSwipeMove: function unbindSwipeMove() {
      Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);
    },

    /**
     * Binds swipe's ending event.
     *
     * @return {Void}
     */
    bindSwipeEnd: function bindSwipeEnd() {
      var _this3 = this;

      Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {
        _this3.end(event);
      });
    },

    /**
     * Unbinds swipe's ending event.
     *
     * @return {Void}
     */
    unbindSwipeEnd: function unbindSwipeEnd() {
      Binder.off(END_EVENTS, Components.Html.wrapper);
    },

    /**
     * Normalizes event touches points accorting to different types.
     *
     * @param {Object} event
     */
    touches: function touches(event) {
      if (MOUSE_EVENTS.indexOf(event.type) > -1) {
        return event;
      }

      return event.touches[0] || event.changedTouches[0];
    },

    /**
     * Gets value of minimum swipe distance settings based on event type.
     *
     * @return {Number}
     */
    threshold: function threshold(event) {
      var settings = Glide.settings;

      if (MOUSE_EVENTS.indexOf(event.type) > -1) {
        return settings.dragThreshold;
      }

      return settings.swipeThreshold;
    },

    /**
     * Enables swipe event.
     *
     * @return {self}
     */
    enable: function enable() {
      disabled = false;
      Components.Transition.enable();
      return this;
    },

    /**
     * Disables swipe event.
     *
     * @return {self}
     */
    disable: function disable() {
      disabled = true;
      Components.Transition.disable();
      return this;
    }
  };
  /**
   * Add component class:
   * - after initial building
   */

  Events.on('build.after', function () {
    Components.Html.root.classList.add(Glide.settings.classes.swipeable);
  });
  /**
   * Remove swiping bindings:
   * - on destroying, to remove added EventListeners
   */

  Events.on('destroy', function () {
    Swipe.unbindSwipeStart();
    Swipe.unbindSwipeMove();
    Swipe.unbindSwipeEnd();
    Binder.destroy();
  });
  return Swipe;
}

function Images (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var Images = {
    /**
     * Binds listener to glide wrapper.
     *
     * @return {Void}
     */
    mount: function mount() {
      this.bind();
    },

    /**
     * Binds `dragstart` event on wrapper to prevent dragging images.
     *
     * @return {Void}
     */
    bind: function bind() {
      Binder.on('dragstart', Components.Html.wrapper, this.dragstart);
    },

    /**
     * Unbinds `dragstart` event on wrapper.
     *
     * @return {Void}
     */
    unbind: function unbind() {
      Binder.off('dragstart', Components.Html.wrapper);
    },

    /**
     * Event handler. Prevents dragging.
     *
     * @return {Void}
     */
    dragstart: function dragstart(event) {
      event.preventDefault();
    }
  };
  /**
   * Remove bindings from images:
   * - on destroying, to remove added EventListeners
   */

  Events.on('destroy', function () {
    Images.unbind();
    Binder.destroy();
  });
  return Images;
}

function Anchors (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  /**
   * Holds detaching status of anchors.
   * Prevents detaching of already detached anchors.
   *
   * @private
   * @type {Boolean}
   */

  var detached = false;
  /**
   * Holds preventing status of anchors.
   * If `true` redirection after click will be disabled.
   *
   * @private
   * @type {Boolean}
   */

  var prevented = false;
  var Anchors = {
    /**
     * Setups a initial state of anchors component.
     *
     * @returns {Void}
     */
    mount: function mount() {
      /**
       * Holds collection of anchors elements.
       *
       * @private
       * @type {HTMLCollection}
       */
      this._a = Components.Html.wrapper.querySelectorAll('a');
      this.bind();
    },

    /**
     * Binds events to anchors inside a track.
     *
     * @return {Void}
     */
    bind: function bind() {
      Binder.on('click', Components.Html.wrapper, this.click);
    },

    /**
     * Unbinds events attached to anchors inside a track.
     *
     * @return {Void}
     */
    unbind: function unbind() {
      Binder.off('click', Components.Html.wrapper);
    },

    /**
     * Handler for click event. Prevents clicks when glide is in `prevent` status.
     *
     * @param  {Object} event
     * @return {Void}
     */
    click: function click(event) {
      if (prevented) {
        event.stopPropagation();
        event.preventDefault();
      }
    },

    /**
     * Detaches anchors click event inside glide.
     *
     * @return {self}
     */
    detach: function detach() {
      prevented = true;

      if (!detached) {
        for (var i = 0; i < this.items.length; i++) {
          this.items[i].draggable = false;
        }

        detached = true;
      }

      return this;
    },

    /**
     * Attaches anchors click events inside glide.
     *
     * @return {self}
     */
    attach: function attach() {
      prevented = false;

      if (detached) {
        for (var i = 0; i < this.items.length; i++) {
          this.items[i].draggable = true;
        }

        detached = false;
      }

      return this;
    }
  };
  define(Anchors, 'items', {
    /**
     * Gets collection of the arrows HTML elements.
     *
     * @return {HTMLElement[]}
     */
    get: function get() {
      return Anchors._a;
    }
  });
  /**
   * Detach anchors inside slides:
   * - on swiping, so they won't redirect to its `href` attributes
   */

  Events.on('swipe.move', function () {
    Anchors.detach();
  });
  /**
   * Attach anchors inside slides:
   * - after swiping and transitions ends, so they can redirect after click again
   */

  Events.on('swipe.end', function () {
    Components.Transition.after(function () {
      Anchors.attach();
    });
  });
  /**
   * Unbind anchors inside slides:
   * - on destroying, to bring anchors to its initial state
   */

  Events.on('destroy', function () {
    Anchors.attach();
    Anchors.unbind();
    Binder.destroy();
  });
  return Anchors;
}

var NAV_SELECTOR = '[data-glide-el="controls[nav]"]';
var CONTROLS_SELECTOR = '[data-glide-el^="controls"]';
var PREVIOUS_CONTROLS_SELECTOR = "".concat(CONTROLS_SELECTOR, " [data-glide-dir*=\"<\"]");
var NEXT_CONTROLS_SELECTOR = "".concat(CONTROLS_SELECTOR, " [data-glide-dir*=\">\"]");
function Controls (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var capture = supportsPassive$1 ? {
    passive: true
  } : false;
  var Controls = {
    /**
     * Inits arrows. Binds events listeners
     * to the arrows HTML elements.
     *
     * @return {Void}
     */
    mount: function mount() {
      /**
       * Collection of navigation HTML elements.
       *
       * @private
       * @type {HTMLCollection}
       */
      this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);
      /**
       * Collection of controls HTML elements.
       *
       * @private
       * @type {HTMLCollection}
       */

      this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);
      /**
       * Collection of arrow control HTML elements.
       *
       * @private
       * @type {Object}
       */

      this._arrowControls = {
        previous: Components.Html.root.querySelectorAll(PREVIOUS_CONTROLS_SELECTOR),
        next: Components.Html.root.querySelectorAll(NEXT_CONTROLS_SELECTOR)
      };
      this.addBindings();
    },

    /**
     * Sets active class to current slide.
     *
     * @return {Void}
     */
    setActive: function setActive() {
      for (var i = 0; i < this._n.length; i++) {
        this.addClass(this._n[i].children);
      }
    },

    /**
     * Removes active class to current slide.
     *
     * @return {Void}
     */
    removeActive: function removeActive() {
      for (var i = 0; i < this._n.length; i++) {
        this.removeClass(this._n[i].children);
      }
    },

    /**
     * Toggles active class on items inside navigation.
     *
     * @param  {HTMLElement} controls
     * @return {Void}
     */
    addClass: function addClass(controls) {
      var settings = Glide.settings;
      var item = controls[Glide.index];

      if (!item) {
        return;
      }

      if (item) {
        item.classList.add(settings.classes.nav.active);
        siblings(item).forEach(function (sibling) {
          sibling.classList.remove(settings.classes.nav.active);
        });
      }
    },

    /**
     * Removes active class from active control.
     *
     * @param  {HTMLElement} controls
     * @return {Void}
     */
    removeClass: function removeClass(controls) {
      var item = controls[Glide.index];

      if (item) {
        item.classList.remove(Glide.settings.classes.nav.active);
      }
    },

    /**
     * Calculates, removes or adds `Glide.settings.classes.disabledArrow` class on the control arrows
     */
    setArrowState: function setArrowState() {
      if (Glide.settings.rewind) {
        return;
      }

      var next = Controls._arrowControls.next;
      var previous = Controls._arrowControls.previous;
      this.resetArrowState(next, previous);

      if (Glide.index === 0) {
        this.disableArrow(previous);
      }

      if (Glide.index === Components.Run.length) {
        this.disableArrow(next);
      }
    },

    /**
     * Removes `Glide.settings.classes.disabledArrow` from given NodeList elements
     *
     * @param {NodeList[]} lists
     */
    resetArrowState: function resetArrowState() {
      var settings = Glide.settings;

      for (var _len = arguments.length, lists = new Array(_len), _key = 0; _key < _len; _key++) {
        lists[_key] = arguments[_key];
      }

      lists.forEach(function (list) {
        toArray(list).forEach(function (element) {
          element.classList.remove(settings.classes.arrow.disabled);
        });
      });
    },

    /**
     * Adds `Glide.settings.classes.disabledArrow` to given NodeList elements
     *
     * @param {NodeList[]} lists
     */
    disableArrow: function disableArrow() {
      var settings = Glide.settings;

      for (var _len2 = arguments.length, lists = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        lists[_key2] = arguments[_key2];
      }

      lists.forEach(function (list) {
        toArray(list).forEach(function (element) {
          element.classList.add(settings.classes.arrow.disabled);
        });
      });
    },

    /**
     * Adds handles to the each group of controls.
     *
     * @return {Void}
     */
    addBindings: function addBindings() {
      for (var i = 0; i < this._c.length; i++) {
        this.bind(this._c[i].children);
      }
    },

    /**
     * Removes handles from the each group of controls.
     *
     * @return {Void}
     */
    removeBindings: function removeBindings() {
      for (var i = 0; i < this._c.length; i++) {
        this.unbind(this._c[i].children);
      }
    },

    /**
     * Binds events to arrows HTML elements.
     *
     * @param {HTMLCollection} elements
     * @return {Void}
     */
    bind: function bind(elements) {
      for (var i = 0; i < elements.length; i++) {
        Binder.on('click', elements[i], this.click);
        Binder.on('touchstart', elements[i], this.click, capture);
      }
    },

    /**
     * Unbinds events binded to the arrows HTML elements.
     *
     * @param {HTMLCollection} elements
     * @return {Void}
     */
    unbind: function unbind(elements) {
      for (var i = 0; i < elements.length; i++) {
        Binder.off(['click', 'touchstart'], elements[i]);
      }
    },

    /**
     * Handles `click` event on the arrows HTML elements.
     * Moves slider in direction given via the
     * `data-glide-dir` attribute.
     *
     * @param {Object} event
     * @return {void}
     */
    click: function click(event) {
      if (!supportsPassive$1 && event.type === 'touchstart') {
        event.preventDefault();
      }

      var direction = event.currentTarget.getAttribute('data-glide-dir');
      Components.Run.make(Components.Direction.resolve(direction));
    }
  };
  define(Controls, 'items', {
    /**
     * Gets collection of the controls HTML elements.
     *
     * @return {HTMLElement[]}
     */
    get: function get() {
      return Controls._c;
    }
  });
  /**
   * Swap active class of current navigation item:
   * - after mounting to set it to initial index
   * - after each move to the new index
   */

  Events.on(['mount.after', 'move.after'], function () {
    Controls.setActive();
  });
  /**
   * Add or remove disabled class of arrow elements
   */

  Events.on(['mount.after', 'run'], function () {
    Controls.setArrowState();
  });
  /**
   * Remove bindings and HTML Classes:
   * - on destroying, to bring markup to its initial state
   */

  Events.on('destroy', function () {
    Controls.removeBindings();
    Controls.removeActive();
    Binder.destroy();
  });
  return Controls;
}

function Keyboard (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var Keyboard = {
    /**
     * Binds keyboard events on component mount.
     *
     * @return {Void}
     */
    mount: function mount() {
      if (Glide.settings.keyboard) {
        this.bind();
      }
    },

    /**
     * Adds keyboard press events.
     *
     * @return {Void}
     */
    bind: function bind() {
      Binder.on('keyup', document, this.press);
    },

    /**
     * Removes keyboard press events.
     *
     * @return {Void}
     */
    unbind: function unbind() {
      Binder.off('keyup', document);
    },

    /**
     * Handles keyboard's arrows press and moving glide foward and backward.
     *
     * @param  {Object} event
     * @return {Void}
     */
    press: function press(event) {
      var perSwipe = Glide.settings.perSwipe;

      if (event.code === 'ArrowRight') {
        Components.Run.make(Components.Direction.resolve("".concat(perSwipe, ">")));
      }

      if (event.code === 'ArrowLeft') {
        Components.Run.make(Components.Direction.resolve("".concat(perSwipe, "<")));
      }
    }
  };
  /**
   * Remove bindings from keyboard:
   * - on destroying to remove added events
   * - on updating to remove events before remounting
   */

  Events.on(['destroy', 'update'], function () {
    Keyboard.unbind();
  });
  /**
   * Remount component
   * - on updating to reflect potential changes in settings
   */

  Events.on('update', function () {
    Keyboard.mount();
  });
  /**
   * Destroy binder:
   * - on destroying to remove listeners
   */

  Events.on('destroy', function () {
    Binder.destroy();
  });
  return Keyboard;
}

function Autoplay (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  var Autoplay = {
    /**
     * Initializes autoplaying and events.
     *
     * @return {Void}
     */
    mount: function mount() {
      this.enable();
      this.start();

      if (Glide.settings.hoverpause) {
        this.bind();
      }
    },

    /**
     * Enables autoplaying
     *
     * @returns {Void}
     */
    enable: function enable() {
      this._e = true;
    },

    /**
     * Disables autoplaying.
     *
     * @returns {Void}
     */
    disable: function disable() {
      this._e = false;
    },

    /**
     * Starts autoplaying in configured interval.
     *
     * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings
     * @return {Void}
     */
    start: function start() {
      var _this = this;

      if (!this._e) {
        return;
      }

      this.enable();

      if (Glide.settings.autoplay) {
        if (isUndefined(this._i)) {
          this._i = setInterval(function () {
            _this.stop();

            Components.Run.make('>');

            _this.start();

            Events.emit('autoplay');
          }, this.time);
        }
      }
    },

    /**
     * Stops autorunning of the glide.
     *
     * @return {Void}
     */
    stop: function stop() {
      this._i = clearInterval(this._i);
    },

    /**
     * Stops autoplaying while mouse is over glide's area.
     *
     * @return {Void}
     */
    bind: function bind() {
      var _this2 = this;

      Binder.on('mouseover', Components.Html.root, function () {
        if (_this2._e) {
          _this2.stop();
        }
      });
      Binder.on('mouseout', Components.Html.root, function () {
        if (_this2._e) {
          _this2.start();
        }
      });
    },

    /**
     * Unbind mouseover events.
     *
     * @returns {Void}
     */
    unbind: function unbind() {
      Binder.off(['mouseover', 'mouseout'], Components.Html.root);
    }
  };
  define(Autoplay, 'time', {
    /**
     * Gets time period value for the autoplay interval. Prioritizes
     * times in `data-glide-autoplay` attrubutes over options.
     *
     * @return {Number}
     */
    get: function get() {
      var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');

      if (autoplay) {
        return toInt(autoplay);
      }

      return toInt(Glide.settings.autoplay);
    }
  });
  /**
   * Stop autoplaying and unbind events:
   * - on destroying, to clear defined interval
   * - on updating via API to reset interval that may changed
   */

  Events.on(['destroy', 'update'], function () {
    Autoplay.unbind();
  });
  /**
   * Stop autoplaying:
   * - before each run, to restart autoplaying
   * - on pausing via API
   * - on destroying, to clear defined interval
   * - while starting a swipe
   * - on updating via API to reset interval that may changed
   */

  Events.on(['run.before', 'swipe.start', 'update'], function () {
    Autoplay.stop();
  });
  Events.on(['pause', 'destroy'], function () {
    Autoplay.disable();
    Autoplay.stop();
  });
  /**
   * Start autoplaying:
   * - after each run, to restart autoplaying
   * - on playing via API
   * - while ending a swipe
   */

  Events.on(['run.after', 'swipe.end'], function () {
    Autoplay.start();
  });
  /**
   * Start autoplaying:
   * - after each run, to restart autoplaying
   * - on playing via API
   * - while ending a swipe
   */

  Events.on(['play'], function () {
    Autoplay.enable();
    Autoplay.start();
  });
  /**
   * Remount autoplaying:
   * - on updating via API to reset interval that may changed
   */

  Events.on('update', function () {
    Autoplay.mount();
  });
  /**
   * Destroy a binder:
   * - on destroying glide instance to clearup listeners
   */

  Events.on('destroy', function () {
    Binder.destroy();
  });
  return Autoplay;
}

/**
 * Sorts keys of breakpoint object so they will be ordered from lower to bigger.
 *
 * @param {Object} points
 * @returns {Object}
 */

function sortBreakpoints(points) {
  if (isObject(points)) {
    return sortKeys(points);
  } else {
    warn("Breakpoints option must be an object");
  }

  return {};
}

function Breakpoints (Glide, Components, Events) {
  /**
   * Instance of the binder for DOM Events.
   *
   * @type {EventsBinder}
   */
  var Binder = new EventsBinder();
  /**
   * Holds reference to settings.
   *
   * @type {Object}
   */

  var settings = Glide.settings;
  /**
   * Holds reference to breakpoints object in settings. Sorts breakpoints
   * from smaller to larger. It is required in order to proper
   * matching currently active breakpoint settings.
   *
   * @type {Object}
   */

  var points = sortBreakpoints(settings.breakpoints);
  /**
   * Cache initial settings before overwritting.
   *
   * @type {Object}
   */

  var defaults = Object.assign({}, settings);
  var Breakpoints = {
    /**
     * Matches settings for currectly matching media breakpoint.
     *
     * @param {Object} points
     * @returns {Object}
     */
    match: function match(points) {
      if (typeof window.matchMedia !== 'undefined') {
        for (var point in points) {
          if (points.hasOwnProperty(point)) {
            if (window.matchMedia("(max-width: ".concat(point, "px)")).matches) {
              return points[point];
            }
          }
        }
      }

      return defaults;
    }
  };
  /**
   * Overwrite instance settings with currently matching breakpoint settings.
   * This happens right after component initialization.
   */

  Object.assign(settings, Breakpoints.match(points));
  /**
   * Update glide with settings of matched brekpoint:
   * - window resize to update slider
   */

  Binder.on('resize', window, throttle(function () {
    Glide.settings = mergeOptions(settings, Breakpoints.match(points));
  }, Glide.settings.throttle));
  /**
   * Resort and update default settings:
   * - on reinit via API, so breakpoint matching will be performed with options
   */

  Events.on('update', function () {
    points = sortBreakpoints(points);
    defaults = Object.assign({}, settings);
  });
  /**
   * Unbind resize listener:
   * - on destroying, to bring markup to its initial state
   */

  Events.on('destroy', function () {
    Binder.off('resize', window);
  });
  return Breakpoints;
}

var COMPONENTS = {
  // Required
  Html: Html,
  Translate: Translate,
  Transition: Transition,
  Direction: Direction,
  Peek: Peek,
  Sizes: Sizes,
  Gaps: Gaps,
  Move: Move,
  Clones: Clones,
  Resize: Resize,
  Build: Build,
  Run: Run,
  // Optional
  Swipe: Swipe,
  Images: Images,
  Anchors: Anchors,
  Controls: Controls,
  Keyboard: Keyboard,
  Autoplay: Autoplay,
  Breakpoints: Breakpoints
};

var Glide = /*#__PURE__*/function (_Core) {
  _inherits(Glide, _Core);

  var _super = _createSuper(Glide);

  function Glide() {
    _classCallCheck(this, Glide);

    return _super.apply(this, arguments);
  }

  _createClass(Glide, [{
    key: "mount",
    value: function mount() {
      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _get(_getPrototypeOf(Glide.prototype), "mount", this).call(this, Object.assign({}, COMPONENTS, extensions));
    }
  }]);

  return Glide;
}(Glide$1);




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"index": 0,
/******/ 			"./style-index": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = globalThis["webpackChunkfictional_university_theme"] = globalThis["webpackChunkfictional_university_theme"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["./style-index"], () => (__webpack_require__("./src/index.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=index.js.map